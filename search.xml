<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git-Github-Hexo搭建博客——（二）</title>
      <link href="/2019/12/18/git-github-hexo-da-jian-bo-ke-er/"/>
      <url>/2019/12/18/git-github-hexo-da-jian-bo-ke-er/</url>
      
        <content type="html"><![CDATA[<!-- password: --><hr><p>主题主体下载地址： <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></p><hr><h1 id="hexo-theme-matery主题设置注意事项"><a href="#hexo-theme-matery主题设置注意事项" class="headerlink" title="hexo-theme-matery主题设置注意事项"></a>hexo-theme-matery主题设置注意事项</h1><h2 id="layout文件"><a href="#layout文件" class="headerlink" title="layout文件"></a>layout文件</h2><p>这个文件是整个博客网页的显示设置</p><p>menu名称.ejs:<br>  都是显示菜单选项的</p><p>  记得在hexo根目录下新建相关的page后，在index中加上type: “”和layout: “”</p><p>layout.ejs:</p><p>  一般是整个博客版面的特效显示在该文件下设置，比如下雪、2D人物插件、天气等插件</p><p>post.ejs: </p><p>  是发表文章的版页显示</p><p>  比如公式，等显示</p><h3 id="widge文件"><a href="#widge文件" class="headerlink" title="-widge文件"></a>-widge文件</h3><p>这个文件是一些浮动窗口插件的设置</p><p>比如音乐、视频、天气、日历等等，其实内部都是一个独立的窗口显示，只不过有些是将其固定在一个版面上而已</p><h3 id="partial文件"><a href="#partial文件" class="headerlink" title="-partial文件"></a>-partial文件</h3><p>这是一些详细的细节设置和插件</p><p>一般根据文件名就知道了其设置和具体作用是什么</p><p>footer.js:</p><p>  网页页脚显示设置，比如版权，运行时间等等</p><p>header.ejs:</p><p>  网页页眉（页头）显示设置，比如menu菜单，头像，网页log等</p><p>  navigation.ejs:</p><pre><code>这是页眉版面的详细设置</code></pre><h2 id="source文件"><a href="#source文件" class="headerlink" title="source文件"></a>source文件</h2><p>这是一些图片、动画、脚本、js、css等自己加入的一些资源</p><h3 id="css文件"><a href="#css文件" class="headerlink" title="css文件"></a>css文件</h3><p>渲染效果特效</p><p>matry.css：</p><p>  这个博客版面渲染特效：</p><p>  比如手机、平板、电脑等版面显示</p><p>  还有导航栏颜色(bg-color)、背景颜色(bg)、代码框(code)边距等设置</p><p>其他的就是自己根据所需添加的渲染</p><h3 id="js文件"><a href="#js文件" class="headerlink" title="js文件"></a>js文件</h3><p>同样是一些特效渲染设置</p><h3 id="libs文件"><a href="#libs文件" class="headerlink" title="libs文件"></a>libs文件</h3><p>一些插件具体实现的文件</p><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>我额外加入的插件具体实现的文件，比如看板娘</p><h3 id="img"><a href="#img" class="headerlink" title="img"></a>img</h3><p>图库</p><h3 id="medias"><a href="#medias" class="headerlink" title="medias"></a>medias</h3><p>图片滚动资源</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>一些资源包，比如看板娘的具体动画</p><h1 id="添加渲染"><a href="#添加渲染" class="headerlink" title="添加渲染"></a>添加渲染</h1><h2 id="添加雪花"><a href="#添加雪花" class="headerlink" title="添加雪花"></a>添加雪花</h2><p>在 js目录下添加snow.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*样式一*/</span><span class="token comment" spellcheck="true">/*样式一*/</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>snow <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> $flake <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div id="snowbox" />'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string">'position'</span><span class="token punctuation">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>                <span class="token string">'z-index'</span><span class="token punctuation">:</span> <span class="token string">'9999'</span><span class="token punctuation">,</span>                <span class="token string">'top'</span><span class="token punctuation">:</span> <span class="token string">'-50px'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'❄'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            documentHeight <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            documentWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            defaults <span class="token operator">=</span> <span class="token punctuation">{</span>                minSize<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>                maxSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>                newOn<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>                flakeColor<span class="token punctuation">:</span> <span class="token string">"#AFDAEF"</span> <span class="token comment" spellcheck="true">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            options <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> startPositionLeft <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> documentWidth <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span>                startOpacity <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                sizeFlake <span class="token operator">=</span> options<span class="token punctuation">.</span>minSize <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> options<span class="token punctuation">.</span>maxSize<span class="token punctuation">,</span>                endPositionTop <span class="token operator">=</span> documentHeight <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">,</span>                endPositionLeft <span class="token operator">=</span> startPositionLeft <span class="token operator">-</span> <span class="token number">500</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">,</span>                durationFall <span class="token operator">=</span> documentHeight <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5000</span><span class="token punctuation">;</span>            $flake<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                left<span class="token punctuation">:</span> startPositionLeft<span class="token punctuation">,</span>                opacity<span class="token punctuation">:</span> startOpacity<span class="token punctuation">,</span>                <span class="token string">'font-size'</span><span class="token punctuation">:</span> sizeFlake<span class="token punctuation">,</span>                color<span class="token punctuation">:</span> options<span class="token punctuation">.</span>flakeColor            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                top<span class="token punctuation">:</span> endPositionTop<span class="token punctuation">,</span>                left<span class="token punctuation">:</span> endPositionLeft<span class="token punctuation">,</span>                opacity<span class="token punctuation">:</span> <span class="token number">0.2</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> durationFall<span class="token punctuation">,</span> <span class="token string">'linear'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>newOn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">snow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        minSize<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* 定义雪花最小尺寸 */</span>        maxSize<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* 定义雪花最大尺寸 */</span>        newOn<span class="token punctuation">:</span> <span class="token number">300</span> <span class="token comment" spellcheck="true">/* 定义密集程度，数字越小越密集 */</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*样式二*/</span><span class="token comment" spellcheck="true">//背景雪花飘落特效</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">{</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>snow <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> $flake <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div id="snowbox" />'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'position'</span><span class="token punctuation">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span><span class="token string">'z-index'</span><span class="token punctuation">:</span><span class="token string">'9999'</span><span class="token punctuation">,</span> <span class="token string">'top'</span><span class="token punctuation">:</span> <span class="token string">'-50px'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&amp;#10052;'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  documentHeight  <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  documentWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  defaults <span class="token operator">=</span> <span class="token punctuation">{</span>    minSize   <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    maxSize   <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    newOn   <span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    flakeColor  <span class="token punctuation">:</span> <span class="token string">"#AFDAEF"</span> <span class="token comment" spellcheck="true">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  options <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> interval<span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> startPositionLeft <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> documentWidth <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span>  startOpacity <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  sizeFlake <span class="token operator">=</span> options<span class="token punctuation">.</span>minSize <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> options<span class="token punctuation">.</span>maxSize<span class="token punctuation">,</span>  endPositionTop <span class="token operator">=</span> documentHeight <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">,</span>  endPositionLeft <span class="token operator">=</span> startPositionLeft <span class="token operator">-</span> <span class="token number">500</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">,</span>  durationFall <span class="token operator">=</span> documentHeight <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5000</span><span class="token punctuation">;</span>  $flake<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    left<span class="token punctuation">:</span> startPositionLeft<span class="token punctuation">,</span>    opacity<span class="token punctuation">:</span> startOpacity<span class="token punctuation">,</span>    <span class="token string">'font-size'</span><span class="token punctuation">:</span> sizeFlake<span class="token punctuation">,</span>    color<span class="token punctuation">:</span> options<span class="token punctuation">.</span>flakeColor  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    top<span class="token punctuation">:</span> endPositionTop<span class="token punctuation">,</span>    left<span class="token punctuation">:</span> endPositionLeft<span class="token punctuation">,</span>    opacity<span class="token punctuation">:</span> <span class="token number">0.2</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>durationFall<span class="token punctuation">,</span><span class="token string">'linear'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>newOn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">snow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       minSize<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/* 定义雪花最小尺寸 */</span>      maxSize<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/* 定义雪花最大尺寸 */</span>      newOn<span class="token punctuation">:</span> <span class="token number">500</span>  <span class="token comment" spellcheck="true">/* 定义密集程度，数字越小越密集 */</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在layout.ejs添加</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 雪花特效<span class="token number">1</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>snow<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/snow.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 雪花特效 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>xuehuapiaoluo<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        <span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="/js/xuehuapiaoluo.js">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在/config.yml设置</p><pre><code>wenzi:  enable: truexuehuapiaoluo:  enable: truesakura:  enable: true</code></pre><p>在/config.yml添加</p><pre><code>libs:  js:    sakura: /js/sakura.js    fireworks: /js/fireworks.js    wenzi: /js/wenzi.js    xuehuapiaoluo: /js/xuehuapiaoluo.js</code></pre><h2 id="添加文字特效"><a href="#添加文字特效" class="headerlink" title="添加文字特效"></a>添加文字特效</h2><p>在js下新建wenzi.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* 鼠标点击文字特效 */</span><span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// var a = new Array("❤富强❤","❤民主❤","❤文明❤","❤和谐❤","❤自由❤","❤平等❤","❤公正❤","❤法治❤","❤爱国❤","❤敬业❤","❤诚信❤","❤友善❤");</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"富强"</span><span class="token punctuation">,</span><span class="token string">"民主"</span><span class="token punctuation">,</span><span class="token string">"文明"</span><span class="token punctuation">,</span><span class="token string">"和谐"</span><span class="token punctuation">,</span><span class="token string">"自由"</span><span class="token punctuation">,</span><span class="token string">"平等"</span><span class="token punctuation">,</span><span class="token string">"公正"</span><span class="token punctuation">,</span><span class="token string">"法治"</span><span class="token punctuation">,</span><span class="token string">"爱国"</span><span class="token punctuation">,</span><span class="token string">"敬业"</span><span class="token punctuation">,</span><span class="token string">"诚信"</span><span class="token punctuation">,</span><span class="token string">"友善"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>        y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">999999999999999999999999999999999999999999999999999999999999999999999</span><span class="token punctuation">,</span>            <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token string">"left"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>            <span class="token string">"position"</span><span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>            <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>            <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"rgb("</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>            <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token number">1500</span><span class="token punctuation">,</span>        <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用仿上面</p><h2 id="添加天气"><a href="#添加天气" class="headerlink" title="添加天气"></a>添加天气</h2><p>在layout.ejs中添加</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 天气 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>weather<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/weather'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在_widget中添加weather.ejs</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> weather <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'iBarNbUMlb'</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"https://apip.weatherdt.com/float/static/js/r.js?v=1111"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在config中添加</p><pre><code>weather:true</code></pre><h2 id="添加2D人物"><a href="#添加2D人物" class="headerlink" title="添加2D人物"></a>添加2D人物</h2><p>在layout.ejs中添加</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>script <span class="token keyword">async</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span> size<span class="token operator">=</span><span class="token string">"90"</span> alpha<span class="token operator">=</span><span class="token string">"0.2"</span> zIndex<span class="token operator">=</span><span class="token string">"0"</span> src<span class="token operator">=</span><span class="token string">"&lt;%- url_for('plugins/ribbon.js/ribbon.min.js') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span># <span class="token string">"Live2D看板娘：https://github.com/JoeyBling/live2d-widget.js"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>live2d <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>enable<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/live2d-widget'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在_partial中添加live2d-widget.ejs</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"&lt;%- url_for('plugins/live2d-widget.js/L2Dwidget.min.js') %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">/**   * 完整配置请参考：https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init   */</span>  <span class="token keyword">var</span> pluginModelPath <span class="token operator">=</span> <span class="token string">"assets/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 模型的文件路径，无需更改</span>    pluginRootPath <span class="token operator">=</span> <span class="token string">"&lt;%- url_for('/live2d_models/') %>"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 插件的路径，无需更改</span>  <span class="token comment" spellcheck="true">//特定的模型json文件名称</span>  <span class="token keyword">var</span> modelPathJson <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"epsilon2_1"</span><span class="token punctuation">:</span> <span class="token string">"Epsilon2.1"</span><span class="token punctuation">,</span>    <span class="token string">"gf"</span><span class="token punctuation">:</span> <span class="token string">"Gantzert_Felixander"</span><span class="token punctuation">,</span>    <span class="token string">"haru/01"</span><span class="token punctuation">:</span> <span class="token string">"haru01"</span><span class="token punctuation">,</span>    <span class="token string">"haru/02"</span><span class="token punctuation">:</span> <span class="token string">"haru02"</span><span class="token punctuation">,</span>    <span class="token string">"nietzsche"</span><span class="token punctuation">:</span> <span class="token string">"nietzche"</span>  <span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token keyword">var</span> modelName <span class="token operator">=</span> <span class="token string">"&lt;%- theme.live2d.model %>"</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token keyword">var</span> modelName <span class="token operator">=</span> <span class="token string">"hibiki"</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>  <span class="token keyword">var</span> modelJsonPath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modelPathJson<span class="token punctuation">[</span>modelName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    modelJsonPath <span class="token operator">=</span> pluginRootPath <span class="token operator">+</span> modelName <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> pluginModelPath <span class="token operator">+</span> modelPathJson<span class="token punctuation">[</span>modelName<span class="token punctuation">]</span> <span class="token operator">+</span>      <span class="token string">".model.json"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    modelJsonPath <span class="token operator">=</span> pluginRootPath <span class="token operator">+</span> modelName <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> pluginModelPath <span class="token operator">+</span> modelName <span class="token operator">+</span> <span class="token string">".model.json"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  L2Dwidget<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    model<span class="token punctuation">:</span> <span class="token punctuation">{</span>      jsonPath<span class="token punctuation">:</span> modelJsonPath    <span class="token punctuation">}</span><span class="token punctuation">,</span>    display<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display<span class="token punctuation">.</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span> position<span class="token punctuation">:</span> <span class="token string">"&lt;%- theme.live2d.display.position %>"</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span> width<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display<span class="token punctuation">.</span>width <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span> height<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display<span class="token punctuation">.</span>height <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display<span class="token punctuation">.</span>hOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span> hOffset<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display<span class="token punctuation">.</span>hOffset <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display<span class="token punctuation">.</span>vOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span> vOffset<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>display<span class="token punctuation">.</span>vOffset <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mobile<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>mobile <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>mobile<span class="token punctuation">.</span>show <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span> show<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>mobile<span class="token punctuation">.</span>show <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>mobile <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>mobile<span class="token punctuation">.</span>scale<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span> scale<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>mobile<span class="token punctuation">.</span>scale <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    react<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>react <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>react<span class="token punctuation">.</span>opacity<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span> opacity<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>live2d<span class="token punctuation">.</span>react<span class="token punctuation">.</span>opacity <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在source中添加动画库，下载地址：<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus.git" target="_blank" rel="noopener">https://github.com/JoeyBling/hexo-theme-yilia-plus.git</a><br>在source/plugins添加文件，下载地址：<a href="https://github.com/JoeyBling/hexo-theme-yilia-plus.git" target="_blank" rel="noopener">https://github.com/JoeyBling/hexo-theme-yilia-plus.git</a></p><p>在config中添加</p><pre><code># 看板娘动态模型插件## https://github.com/JoeyBling/live2d-widget.jslive2d:  # (关闭请设置为false)  enable: true  model: shizuku  display:    position: right # 显示位置：left/right(default: &#39;right&#39;)    width: 145  # 模型的长度(default: 150)    height: 315 # 模型的高度(default: 300)    hOffset: 50 # 水平偏移(default: 0)    vOffset: 35 # 垂直偏移(default: -20)  mobile:    show: false # 是否在移动设备上显示(default: true)    scale: 0.6 # 移动设备上的缩放(default: 0.5)  react:    opacity: 0.8 # 模型透明度(default: 0.7)</code></pre><h2 id="添加页面标题切换功能"><a href="#添加页面标题切换功能" class="headerlink" title="添加页面标题切换功能"></a>添加页面标题切换功能</h2><p>在header.ejs中的第一个<a>, </a>之间添加：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>tab_title_change <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>tab_title_change<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token comment" spellcheck="true">/* 标签页标题切换 */</span>  <span class="token keyword">var</span> originTitle <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">;</span>  <span class="token keyword">var</span> titleTime<span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"&lt;%- theme.tab_title_change.left_tab_title %>"</span> <span class="token operator">+</span> originTitle<span class="token punctuation">;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>titleTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"&lt;%- theme.tab_title_change.return_tab_title %>"</span> <span class="token operator">+</span> originTitle<span class="token punctuation">;</span>      titleTime <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>title <span class="token operator">=</span> originTitle<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在config中添加</p><pre><code># Tab Title Change | 标签页标题切换tab_title_change:  enable: true  left_tab_title: &#39;(つェ⊂) 我藏好了哦~ &#39;  return_tab_title: &#39;(*´∇｀*) 被你发现啦~ &#39;</code></pre><h2 id="添加github-的fork-me"><a href="#添加github-的fork-me" class="headerlink" title="添加github 的fork me"></a>添加github 的fork me</h2><p>在header.ejs中的第一个</nav>之前添加：</p><pre><code>&lt;% if (theme.githubLink &amp;&amp; theme.githubLink.enable) { %&gt;    &lt;%- partial(&#39;_partial/github-link&#39;) %&gt;&lt;% } %&gt;</code></pre><p>在_partial中添加github-link.ejs</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token punctuation">.</span>nav<span class="token operator">-</span>transparent <span class="token punctuation">.</span>github<span class="token operator">-</span>corner <span class="token punctuation">{</span>        display<span class="token punctuation">:</span> none <span class="token operator">!</span>important<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>github<span class="token operator">-</span>corner <span class="token punctuation">{</span>        position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        z<span class="token operator">-</span>index<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">;</span>        top<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        right<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        border<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        transform<span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>github<span class="token operator">-</span>corner svg <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> #0f9d58<span class="token punctuation">;</span>        fill<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        height<span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>        width<span class="token punctuation">:</span> 64px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>github<span class="token operator">-</span>corner<span class="token punctuation">:</span>hover <span class="token punctuation">.</span>octo<span class="token operator">-</span>arm <span class="token punctuation">{</span>        animation<span class="token punctuation">:</span> a <span class="token number">0</span><span class="token punctuation">.</span>56s ease<span class="token operator">-</span><span class="token keyword">in</span><span class="token operator">-</span>out<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span>github<span class="token operator">-</span>corner <span class="token punctuation">.</span>octo<span class="token operator">-</span>arm <span class="token punctuation">{</span>        animation<span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @keyframes a <span class="token punctuation">{</span>        <span class="token number">0</span><span class="token operator">%</span><span class="token punctuation">,</span>        to <span class="token punctuation">{</span>            transform<span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token number">20</span><span class="token operator">%</span><span class="token punctuation">,</span>        <span class="token number">60</span><span class="token operator">%</span> <span class="token punctuation">{</span>            transform<span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token operator">-</span>25deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token number">40</span><span class="token operator">%</span><span class="token punctuation">,</span>        <span class="token number">80</span><span class="token operator">%</span> <span class="token punctuation">{</span>            transform<span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>10deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.url %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"github-corner tooltipped hide-on-med-and-down"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span>   data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"&lt;%- theme.githubLink.title %>"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"left"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>svg viewBox<span class="token operator">=</span><span class="token string">"0 0 250 250"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>path d<span class="token operator">=</span><span class="token string">"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>path<span class="token operator">></span>        <span class="token operator">&lt;</span>path d<span class="token operator">=</span><span class="token string">"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"</span>              fill<span class="token operator">=</span><span class="token string">"currentColor"</span> style<span class="token operator">=</span><span class="token string">"transform-origin: 130px 106px;"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"octo-arm"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>path<span class="token operator">></span>        <span class="token operator">&lt;</span>path d<span class="token operator">=</span><span class="token string">"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"</span>              fill<span class="token operator">=</span><span class="token string">"currentColor"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"octo-body"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>path<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在config中添加</p><pre><code># Whether to display fork me on github icon and link, default true, You can change it to your repo address# 配置是否在 header 中显示 fork me on github 的图标，默认为true，你可以修改为你的仓库地址.githubLink:  enable: true  url: https://github.com/zzw1024  title: Fork Me</code></pre><h2 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a>添加音乐</h2><p>在layout.ejs中添加</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 音乐 <span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/music'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在_widget中新建music.esj</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token keyword">var</span> audiosJson <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>site<span class="token punctuation">.</span>data<span class="token punctuation">.</span>musics<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"&lt;%- theme.libs.css.aplayer %>"</span><span class="token operator">></span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"&lt;% if (theme.music.enable &amp;&amp; !theme.music.fixed) { %>music-player&lt;% } %>"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>showTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-music"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> theme<span class="token punctuation">.</span>music<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col l8 offset-l2 m10 offset-m1 s12"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"aplayer"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"music"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;%- theme.libs.js.aplayer %>"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">APlayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        container<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'aplayer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        fixed<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.music.fixed %>'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        autoplay<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.music.autoplay %>'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        theme<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.music.theme %>'</span><span class="token punctuation">,</span>        loop<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.music.loop %>'</span><span class="token punctuation">,</span>        order<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.music.order %>'</span><span class="token punctuation">,</span>        preload<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.music.preload %>'</span><span class="token punctuation">,</span>        volume<span class="token punctuation">:</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'&lt;%- theme.music.volume %>'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        listFolded<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.music.listFolded %>'</span> <span class="token operator">===</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        listMaxHeight<span class="token punctuation">:</span> <span class="token string">'&lt;%- theme.music.listMaxHeight %>'</span><span class="token punctuation">,</span>        audio<span class="token punctuation">:</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> audiosJson <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在config中添加</p><pre><code># Whether to display the musics.# 是否在首页显示音乐.music:  enable: false  showTitle: true  title: &#39;亲，听听音乐放松放松。。。&#39;  fixed: false # 开启吸底模式  autoplay: false # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39; # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;list&#39; # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39; # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: #列表最大高度</code></pre><h1 id="添加项目栏"><a href="#添加项目栏" class="headerlink" title="添加项目栏"></a>添加项目栏</h1><h2 id="添加分类标签等menu"><a href="#添加分类标签等menu" class="headerlink" title="添加分类标签等menu"></a>添加分类标签等menu</h2><p><strong>其他的比如分类标签如下</strong></p><p>添加page</p><pre><code>hexo new page &quot;menuName&quot;</code></pre><p>并且编辑对应的index</p><pre><code>---title: tagsdate: 2018-12-12 21:25:30type: &quot;tags&quot;   //一定得有layout: &quot;tags&quot;  //一定得有---</code></pre><h2 id="添加友链："><a href="#添加友链：" class="headerlink" title="添加友链："></a>添加友链：</h2><p>添加page</p><pre><code>hexo new page &quot;friends&quot;</code></pre><p>并且编辑对应的index</p><pre><code>---title: friendsdate: 2018-12-12 21:25:30type: &quot;friends&quot;layout: &quot;friends&quot;  //一定的有---</code></pre><p>在hexo/source下新建 _data(下划线data) 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：  </p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加好文收藏"><a href="#添加好文收藏" class="headerlink" title="添加好文收藏"></a>添加好文收藏</h2><pre><code>hexo new page &quot;goodpapers&quot;</code></pre><p>修改站点_config.yml文件</p><pre><code>menu:  好文收藏:    url: /goodpapers    icon: fa-coffee</code></pre><p>修该goodpapers/index.md</p><pre><code>---title: 好文收藏date: 2019-02-18 11:09:48---1. [我的八年博士生涯](https://www.huxiu.com/article/273773.html?f=member_collections)         2. [我曾是性用品微商](https://www.huxiu.com/article/285040.html?f=member_collections)3. [乔布斯回归：从任性国王到铁腕企业家](https://www.huxiu.com/article/285320.html)4. [那些简历造假拿 Offer 的程序员，后来都怎么样了？](https://mp.weixin.qq.com/s/a2rscuxJ0fl07OJ-0Shxfg)5. [知网是个什么东西啊，好暴利](https://www.huxiu.com/article/285502.html)</code></pre><h2 id="添加相册"><a href="#添加相册" class="headerlink" title="添加相册"></a>添加相册</h2><h1 id="功能修改添加备忘录"><a href="#功能修改添加备忘录" class="headerlink" title="功能修改添加备忘录"></a>功能修改添加备忘录</h1><p>添加简历(matery):<br>  在about.ejs中加入一个新的card，直接复制上面的就行    </p><p>修改简历:<br>  在自己的about/index里面写表格建立</p><p>添加收藏文章:<br>  在goodpapers/index里面写</p><p>添加友链：<br>  在source/_data/friends.json里面按照格式写</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-Github-Hexo搭建博客——（一）</title>
      <link href="/2019/12/18/git-github-hexo-da-jian-bo-ke-yi/"/>
      <url>/2019/12/18/git-github-hexo-da-jian-bo-ke-yi/</url>
      
        <content type="html"><![CDATA[<!-- password: --><h1 id="新建博客以及新电脑使用博客说明"><a href="#新建博客以及新电脑使用博客说明" class="headerlink" title="新建博客以及新电脑使用博客说明"></a>新建博客以及新电脑使用博客说明</h1><hr><p>新电脑与新建博客步骤类似，就直接从GitHub中clone的文件放入hexo文件中<br>注意，好像是不要hexo初始化，直接将clone的文件放入就行<br>注意，添加node插件，需要哪些后面会说<br>注意，后面hexo g -d 上传部分</p><hr><p><strong>Git + Github + Hexo</strong></p><ol><li>安装Git</li></ol><p>去Git官网根据你的电脑参数，下载对应版本。</p><ol start="2"><li>安装Node.js  </li></ol><p>在 Windows 环境下安装 Node.js 非常简单，仅须到官网下载安装文件并执行即可完成安装。</p><ol start="3"><li>安装Hexo</li></ol><ul><li><p>使用git安装：</p><pre><code>npm install hexo-cli -gnpm install hexo-deployer-git --save</code></pre></li><li><p>hexo初始化</p><pre><code>hexo init</code></pre></li></ul><hr><p>以下部分只是针对新建博客， 新电脑不需要的</p><hr><ol start="4"><li>部署到远程</li></ol><p><strong>以下操作都是在git中执行</strong></p><ul><li><p>注册github账号（或者coding或者码云）</p></li><li><p>新建项目  </p><ul><li><strong>github注意</strong><br>项目名称严格为 GitHub账号名 + .github.io<br>在网页上直接输入该项目名字就可以访问博客了，这是部署到GitHub的最大优势！</li></ul></li><li><p>配置SSH密钥</p><ul><li><p>查看是否有密钥</p><pre><code>$ cd ~/.ssh</code></pre></li><li><p>不存在的话新建密钥  </p><pre><code>$ssh-keygen -t rsa -C &quot;your_email@example.com&quot;#这将按照你提供的邮箱地址，创建一对密钥Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</code></pre><ul><li><p>相关提示</p><pre><code>Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again]</code></pre></li><li><p>显示信息</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</code></pre></li></ul></li><li><p>在github中添加公钥 </p><ul><li><p>复制ssh</p><pre><code>clip &lt; ~/.ssh/id_rsa.pub</code></pre></li><li><p>进入github的账户设置中，选择ssh keys 直接粘贴</p></li></ul></li><li><p>测试</p><pre><code>$ ssh -T git@github.com</code></pre><ul><li>反馈<pre><code>The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?   //输入yes</code></pre></li></ul></li></ul></li><li><p>上传github中 并且分流到其他仓库<br>在congfig中进行设置  </p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.html  https://gitee.com/zzw1024/myBlog.gitdeploy:type: gitrepository:   github: https://github.com/zzw1024/zzw1024.github.io.git    //github项目地址  gitee: https://gitee.com/zzw1024/myBlog.git                 //码云项目地址branch: master</code></pre></li></ul><ol start="5"><li>上传</li></ol><pre><code>hexo g -d</code></pre><p>如果报错</p><pre><code>ERROR Deployer not found: git</code></pre><p>再次运行</p><pre><code>npm install hexo-deployer-git --save</code></pre><ol start="7"><li>添加域名</li></ol><p><strong>只有部署在GitHub不一定需要添加域名，其他仓库都需要</strong><br>在仓库的项目设置中找到添加域名的项，把你子啊阿里或者其他地方买的域名写入</p><ul><li>阿里购买域名<br>登录阿里云，选择域名进行购买，购买完成后选择自己的后台控制，进行域名解析，一天后域名成效</li></ul><ol start="8"><li>美化</li></ol><p>从网上找到的主题clone到theme文件夹下<br>然后更改config</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: matery  //主题名字</code></pre><ol start="9"><li>备份博客文件</li></ol><p><strong>只针对博客文件所在的第一台电脑中</strong><br>直接在hexo文件内git init<br>然后在上传到你新建的一个项目中（最好是私有仓库，因为里面有你的账号信息）</p><h1 id="config-yml设置额外添加说明"><a href="#config-yml设置额外添加说明" class="headerlink" title="config.yml设置额外添加说明"></a>config.yml设置额外添加说明</h1><hr><p>一般在新电脑中需要添加而外的功能<br>注意，一般clone下来的config.yml已经有功能，只不过需要npm安装环境<br>需不需要，先运行博客试看一下，然后再查看有没有设置，最后再考虑要不要安装</p><hr><p><strong>以下操作都是在hexo文件在的cmd中执行</strong></p><h2 id="修改新建文章、page、draft的自动添加内容"><a href="#修改新建文章、page、draft的自动添加内容" class="headerlink" title="修改新建文章、page、draft的自动添加内容"></a>修改新建文章、page、draft的自动添加内容</h2><p>在scaffolds的各个文件里面直接设置就行</p><h2 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h2><p>找到language： 后面一定是选中主题下language文件下的语言语言名字，比如：zh-CN<br>记得将自己主题设置config及其相关设置文件下的英文对应的中文名添加到主题下language/zh-CN 里面</p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre><code>npm i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下：</p><pre><code>highlight:  enable: falseprism_plugin:  mode: &#39;preprocess&#39;    # realtime/preprocess  theme: &#39;tomorrow&#39;  line_number: false    # default false  custom_css:</code></pre><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre><h2 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h2><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 hexo-permalink-pinyin Hexo 插件使在生成文章时生成中文拼音的永久链接。<br>安装命令如下：</p><pre><code>npm i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;</code></pre><h2 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h2><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount插件。<br>安装命令如下：</p><pre><code>npm i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 _config.yml 文件中，激活以下配置项即可：</p><pre><code>wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h2 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h2><p>本主题中还使用到了 hexo-generator-feed 的 Hexo 插件来做 RSS，安装命令如下：</p><pre><code>npm install hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date</code></pre><p>执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明你已经安装成功了。</p><h2 id="添加goole广告投送"><a href="#添加goole广告投送" class="headerlink" title="添加goole广告投送"></a>添加goole广告投送</h2><ul><li><p>注册登录<a href="https://www.google.com/adsense/" target="_blank" rel="noopener">google Adsense官网</a><br>打开网站之后就可以开始注册了（即使你有google账户也要注册！）</p><ol><li><p>官网点击注册（sign up）,进入注册页面</p></li><li><p>在注册页面填写你的信息（网站地址不可以是二级域名）</p></li><li><p>在之后填写你的地址信息</p></li><li><p>地址信息填完毕之后会给你一串代码，类似如下：</p><pre><code>&lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({ google_ad_client: &quot;ca-pub-8955547868703063&quot;, enable_page_level_ads: true});&lt;/script&gt;</code></pre></li><li><p>把这一串代码放在<br>博客目录\themes\yilia\layout_partial\head.ejs文件的 <head>与<meta name="generator" content="Hexo 4.0.0"><link rel="alternate" href="/atom.xml" title="自由の翼" type="application/atom+xml"><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"><link rel="stylesheet" href="/css/prism-line-numbers.css" type="text/css"></head>之间</p></li><li><p>更新上传</p></li></ol></li><li><p>返回官网进行确认检测</p></li><li><p>审核通过<br>稍等一天时间，如果没有问题，即可审核通过。<br>有问题就改问题，然后在申请。</p></li><li><p>添加展示广告</p><ol><li><p>在网页上找到“广告” -&gt; “广告单元” -&gt; “创建新的广告单元” -&gt; “展示广告”</p></li><li><p>然后再界面里面先填写一个名字(例如ad_google_1)</p></li><li><p>点击创建</p></li><li><p>将生成的代码添加到<br>博客目录</p><pre><code>\themes\yilia\layout\_partial\article.ejs</code></pre><p>中对应适当位置即可，注意别让广告扰乱了页面布局，影响全局美感。</p><p>添加代码如下：</p><pre><code>可以在文章开头添加：&lt;!--文章头google图片--&gt;&lt;% if ((theme.googlead_type === 2 || (theme.googlead_type === 1 &amp;&amp; post.googlead)) &amp;&amp; !index){ %&gt; &lt;hr&gt; &lt;strong&gt;⬇️下面这个看起来像广告的东西，其实是只个图片，根本打不开的。不过听说有时候⬇️&lt;/strong&gt; &lt;br&gt; &lt;script async src=&quot;https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt; &lt;!-- googlead1 --&gt; &lt;ins class=&quot;adsbygoogle&quot;      style=&quot;display:block&quot;      data-ad-client=&quot;ca-pub-8955547868703063&quot;      data-ad-slot=&quot;3853918361&quot;      data-ad-format=&quot;auto&quot;      data-full-width-responsive=&quot;true&quot;&gt;&lt;/ins&gt; &lt;script&gt;      (adsbygoogle = window.adsbygoogle || []).push({}); &lt;/script&gt;&lt;% } %&gt;&lt;!--文章头google图片结束--&gt;可以在结尾处添加：&lt;!-- 尾google广告 --&gt;   &lt;% if ((theme.googlead_type === 2 || (theme.googlead_type === 1 &amp;&amp; post.googlead)) &amp;&amp; !index){ %&gt;       &lt;hr&gt;       &lt;strong&gt;⬇️下面这个才是真正的广告哦，如果感觉真的从文章中有带走新东西的话，可以帮我点一下哦⬇️&lt;/strong&gt;     &lt;br&gt;       这里是google网页生成的代码   &lt;% } %&gt;&lt;!-- 尾google广告 --&gt;</code></pre><p>然后还需要在</p><pre><code>/theme/yilia/_config.yml</code></pre><p>中合适位置添加</p><pre><code>#google广告基础设定：0-关闭广告； 1-文章对应的md文件里有googlead: true属性，才有广告； 2-所有文章均有广告googlead_type: 1</code></pre><p>使用教程如上面提示：<br>0-关闭广告；<br>1-文章对应的md文件里有googlead: true属性，才有广告；<br>2-所有文章均有广告   </p></li></ol></li><li><p>添加完毕</p><p>  在网页中点击“大功告成”</p></li><li><p>网页上传</p><pre><code>hexo cleanhexo ghexo d</code></pre></li><li><p>等待一小时左右大约会出现广告</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/12/18/hello-world/"/>
      <url>/2019/12/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分类大全</title>
      <link href="/2019/12/08/fen-lei-da-quan/"/>
      <url>/2019/12/08/fen-lei-da-quan/</url>
      
        <content type="html"><![CDATA[<p>临时记录一下本博文中采取的分类情况。。。</p><a id="more"></a><p>algorithm<br>PAT</p><p>生活百味<br>美好回忆</p><p>学习百态</p><p>兴趣爱好</p>]]></content>
      
      
      
        <tags>
            
            <tag> 置顶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电影录像</title>
      <link href="/2019/12/08/dian-ying-lu-xiang/"/>
      <url>/2019/12/08/dian-ying-lu-xiang/</url>
      
        <content type="html"><![CDATA[<p>哈哈哈，除了学习，也要生活么，所以希望此贴少更新哦。。。</p><a id="more"></a><h1 id="剧"><a href="#剧" class="headerlink" title="剧"></a>剧</h1><h4 id="好剧"><a href="#好剧" class="headerlink" title="好剧"></a>好剧</h4><p><strong>亮剑：</strong><br>是吧</p><p><strong>康熙王朝：</strong><br>康乾盛世的开端</p><p><strong>神雕侠侣：</strong><br>过儿</p><p><strong>我的团长我的团：</strong><br>国军的溃败，英雄的兴叹</p><h4 id="史诗"><a href="#史诗" class="headerlink" title="史诗"></a>史诗</h4><p><strong>权力的游戏：</strong><br>当之无愧</p><h4 id="烧脑"><a href="#烧脑" class="headerlink" title="烧脑"></a>烧脑</h4><p><strong>毛骗：</strong><br>看了才会赞</p><p><strong>河神</strong><br>应该是李现的出名作</p><p><strong>杀不死：</strong><br>值得的</p><h4 id="搞笑"><a href="#搞笑" class="headerlink" title="搞笑"></a>搞笑</h4><p><strong>武林外传：</strong><br>指如疾风，势如闪电</p><p><strong>爱情公寓：</strong><br>好男人就是我，我就是好男人</p><h4 id="恐怖"><a href="#恐怖" class="headerlink" title="恐怖"></a>恐怖</h4><h1 id="影"><a href="#影" class="headerlink" title="影"></a>影</h1><h4 id="科幻"><a href="#科幻" class="headerlink" title="科幻"></a>科幻</h4><p><strong>魔戒：</strong><br>一定是首位，我心中的史诗级</p><p><strong>阿凡达：</strong><br>值得回看</p><p><strong>夺宝奇兵：</strong><br>一定要看完</p><p><strong>生化危机：</strong><br>终结了</p><p><strong>复仇者联盟：</strong><br>是吧</p><p><strong>加勒比海盗：</strong><br>杰克斯派罗</p><h4 id="激情"><a href="#激情" class="headerlink" title="激情"></a>激情</h4><p><strong>速度与激情：</strong><br>可以的</p><p><strong>怒火攻心：</strong></p><p><strong>绝命速递：</strong></p><p><strong>极品飞车：</strong></p><h4 id="情感"><a href="#情感" class="headerlink" title="情感"></a>情感</h4><p><strong>假如爱有天意：</strong></p><p><strong>恋爱这件小事：</strong></p><p><strong>怦然心动：</strong></p><p><strong>罗马假日：</strong></p><p><strong>生死之恋：</strong></p><p><strong>泰坦尼克号</strong></p><h4 id="搞笑-1"><a href="#搞笑-1" class="headerlink" title="搞笑"></a>搞笑</h4><p><strong>三傻大闹宝莱坞：</strong></p><p><strong>唐人街神探：</strong></p><p><strong>夏洛特烦恼：</strong></p><h4 id="烧脑-1"><a href="#烧脑-1" class="headerlink" title="烧脑"></a>烧脑</h4><p><strong>盗梦空间：</strong></p><h4 id="动漫"><a href="#动漫" class="headerlink" title="动漫"></a>动漫</h4><p><strong>宫崎骏系列</strong></p><p><strong>你的名字:</strong></p><h4 id="恐怖-1"><a href="#恐怖-1" class="headerlink" title="恐怖"></a>恐怖</h4><p><strong>静寂岭：</strong></p><p><strong>林正英系列</strong></p><h1 id="记录片"><a href="#记录片" class="headerlink" title="记录片"></a>记录片</h1><h4 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h4><p><strong>舌尖上的中国：</strong></p><h4 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h4><p><strong>超级工程：</strong></p>]]></content>
      
      
      <categories>
          
          <category> 美好回忆 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影视 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的阅读世界</title>
      <link href="/2019/12/08/yue-du-shi-jie/"/>
      <url>/2019/12/08/yue-du-shi-jie/</url>
      
        <content type="html"><![CDATA[<p>用来记录自己的读书记录：一是记忆，二是勉励，望此贴时常更新。。。</p><a id="more"></a><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>c语言程序设计<br>C++ prime 5th<br>Python编程：从入门到实践</p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>Effective C++<br>More Effective C++<br>STL源码剖析<br>unix 网络编程<br>图解 TCP/IP</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>大话数据结构 （程杰）<br>算法笔记<br>图解算法<br>哈啊，算法</p><h1 id="程序人生"><a href="#程序人生" class="headerlink" title="程序人生"></a>程序人生</h1><p>剑指offer<br>程序员面试宝典</p><h1 id="历史人物"><a href="#历史人物" class="headerlink" title="历史人物"></a>历史人物</h1><p>亮剑<br>红墙往事<br>红墙见证录<br>红墙大事:共和国重大历史事件的来龙去脉<br>共和国秘史<br>太平洋战争实录<br>海湾战争全史<br>世界大战实录之冷战<br>中越战争秘录<br>自由与荣耀<br>中国近代史<br>百年中国</p><p>大秦帝国<br>唐朝那些事<br>宋朝那些事<br>元朝那些事<br>话说明朝<br>话说汉朝<br>纪连海说清史</p><p>枭雄末路<br>海棠花开<br>历史转折中的邓小平<br>帝师刘伯温<br>我的前半生</p><h1 id="人文社科"><a href="#人文社科" class="headerlink" title="人文社科"></a>人文社科</h1><p>群书治要<br>易经的奥秘<br>左手塔木德，右手羊皮卷<br>红楼梦</p><p>货币战争<br>杜拉拉升职记</p><p>藏地密码<br>鬼谷子的局<br>古董局中局<br>长安十二时辰</p><p>花开半夜<br>匆匆那年<br>谁的青春不迷茫<br>我在未来等你<br>你的孤独，虽败犹荣<br>向着光亮那方<br>拿什么拯救你，我的爱人<br>永不瞑目<br>玉观音</p><h1 id="个人兴趣"><a href="#个人兴趣" class="headerlink" title="个人兴趣"></a>个人兴趣</h1>]]></content>
      
      
      <categories>
          
          <category> 学习百态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的学习记录</title>
      <link href="/2019/12/08/xue-xi-ji-lu/"/>
      <url>/2019/12/08/xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>此博文是用来记录自己的学习生涯中，所学到的知识以及其掌握程度。。。</p><a id="more"></a><h1 id="基础【了解】"><a href="#基础【了解】" class="headerlink" title="基础【了解】"></a>基础【了解】</h1><p>C++<br>linux<br>汇编<br>python<br>MySQL<br>HTML<br>CSS<br>ip<br>makefile</p><h1 id="精通"><a href="#精通" class="headerlink" title="精通"></a>精通</h1><p>C++<br>MATLAB<br>Linux命令<br>git</p><p>算法与数据结构</p><h1 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h1><p>A_start 算法<br>Dijkstra<br>人工势场<br>遗传算法<br>蚁群算法<br>粒子群算法<br>无人避障<br>水流算法<br>免疫算法</p>]]></content>
      
      
      <categories>
          
          <category> 学习百态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级终结——心得总结</title>
      <link href="/2019/12/08/pat-jia-ji-zhong-jie-xin-de-zong-jie/"/>
      <url>/2019/12/08/pat-jia-ji-zhong-jie-xin-de-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="首先报喜一波"><a href="#首先报喜一波" class="headerlink" title="首先报喜一波"></a>首先报喜一波</h2><p>第一次考，满分，4道题总共花了2个小时做完，一部分是题简单的原因，一部分也是自己三刷了PAT的心血吧。</p><a id="more"></a><h2 id="刷PAT的经验"><a href="#刷PAT的经验" class="headerlink" title="刷PAT的经验"></a>刷PAT的经验</h2><p><strong>神指导</strong>： 胡凡-《算法笔记》<br><strong>神助攻</strong>：柳婼的博客，百度即可。<br><strong>战场</strong>：PAT官网和牛客PAT专项</p><p>首先,按照算法笔记这本书从一页认真看到最后一页，里面讲的各种算法和数据结构都特别全，特别详细，你按照这本书的章节去练习PAT题，按章节一刷，同时总结每个章节的思路和方法。</p><p>二刷就按题号走，这样就打乱了刷题顺序，让你不会一下就知道使用什么思路了。</p><p>三刷 就刷你前面一直没有刷通过的题。</p><p><strong>刷题技巧</strong>：按照算法笔记那本书的方法解题，并结合一下柳婼大神的答案，因为她很有一些解题技巧的。记住，调试代码的时候在牛客上调，因为牛客会给出测试样例，而PAT官网只告诉你错了，都不知道错了的样例是什么，牛客只有前100题，而PAT有所有题集。</p><h2 id="最后总结我的技巧："><a href="#最后总结我的技巧：" class="headerlink" title="最后总结我的技巧："></a>最后总结我的技巧：</h2><p><strong>声明</strong>：我不是大神，方法只适合考试的时候用，不建议用来总结算法方法，因为以下的方法不推荐。</p><p>记住，20分的题不需要考虑任何空间和时间的限制，因为这道题不需要你去设计高大上的算法，你想到了最笨的方法一般都能通过的，在考场，时间是一切，想到了方法就直接上手，不要考虑会不会超时等因素。</p><p>25，30分的题，是要讲究技巧的，一般一定考验了你对STL【C++的代码者】的使用。<br>能不能用暴力的笨方法，看数据量，我感觉在500以内的暴力，在三层for循环内都不会超时间【个人看法】，一旦超过了这个数量级，只要你的算法设计有2层for，铁定不行的，不用浪费时间敲出来，自己先别的方法。</p><p><strong>20分的题</strong><br>一般20分的题，恶心，麻烦，不难<br>10分钟没思路，或，20分钟没调出代码，跳过先，跳过先，跳过先<br>一般考数据处理：字母大小写，一句话带空格的输入，正表达式<br>素数，分数的处理，大数运算</p><p><strong>树的题</strong>：<br>问输出某某序列，一定是重构出二叉树【笨的就直接真的重构出来，聪明的就使用静态重构树】<br>问什么路径，一定是DFS啥都别想</p><p><strong>图的题</strong>：<br>路径问题，一定是先Dijkstra，然后再DFS<br>集合，团体问题：一定使用并查集【算法笔记有讲解】或者加上DFS</p><p><strong>动态规划</strong><br>听说是PAT超纲了，不会考，但也得看，因为考过的<br>动态规划题，不需要花大时间复习，因为考的概率很少，其次很难，碰上了放弃的概率大。<br>主要复习两大类即可：<br>背包问题：0-1，完全<br>上楼梯问题：青蛙跳，机器人走路</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>一定的多练习原题，一天不要贪多，但每天都得刷<br>有任何问题，欢迎留言联系，小伙我人不聪明，但人热情哦o(<em>￣▽￣</em>)o</p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1025 PAT Ranking</title>
      <link href="/2019/12/05/pat-jia-ji-a1025-pat-ranking/"/>
      <url>/2019/12/05/pat-jia-ji-a1025-pat-ranking/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank.</p><a id="more"></a><p>Input Specification:</p><p>Each input file contains one test case. For each case, the first line contains a positive number N (≤), the number of test locations. Then N ranklists follow, each starts with a line containing a positive integer K (≤), the number of testees, and then K lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space.</p><p>Output Specification:</p><p>For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:<br>registration_number final_rank location_number local_rank</p><p>The locations are numbered from 1 to N. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers.</p><p>Sample Input:<br>2<br>5<br>1234567890001 95<br>1234567890005 100<br>1234567890003 95<br>1234567890002 77<br>1234567890004 85<br>4<br>1234567890013 65<br>1234567890011 25<br>1234567890014 100<br>1234567890012 85</p><p>Sample Output:<br>9<br>1234567890005 1 1 1<br>1234567890014 1 2 1<br>1234567890001 3 1 2<br>1234567890003 3 1 2<br>1234567890004 5 1 4<br>1234567890012 5 2 2<br>1234567890002 7 1 5<br>1234567890013 8 2 3<br>1234567890011 9 2 4</p>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1024 Palindromic Numberr</title>
      <link href="/2019/12/05/pat-jia-ji-a1024-palindromic-numberr/"/>
      <url>/2019/12/05/pat-jia-ji-a1024-palindromic-numberr/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>A number that will be the same when it is written forwards or backwards is known as a Palindromic Number. For example, 1234321 is a palindromic number. All single digit numbers are palindromic numbers.</p><a id="more"></a><p>Non-palindromic numbers can be paired with palindromic ones via a series of operations. First, the non-palindromic number is reversed and the result is added to the original number. If the result is not a palindromic number, this is repeated until it gives a palindromic number. For example, if we start from 67, we can obtain a palindromic number in 2 steps: 67 + 76 = 143, and 143 + 341 = 484.</p><p>Given any positive integer N, you are supposed to find its paired palindromic number and the number of steps taken to find it.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case consists of two positive numbers N and K, where N (≤) is the initial numer and K (≤) is the maximum number of steps. The numbers are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, output two numbers, one in each line. The first number is the paired palindromic number of N, and the second number is the number of steps taken to find the palindromic number. If the palindromic number is not found after K steps, just output the number obtained at the Kth step and K instead.</p><p><strong>Sample Input 1:</strong></p><pre><code>67 3</code></pre><p><strong>Sample Output 1:</strong></p><pre><code>4842</code></pre><p><strong>Sample Input 2:</strong></p><pre><code>69 3</code></pre><p><strong>Sample Output 2:</strong></p><pre><code>13533</code></pre><p><strong>Solution:</strong></p><p>问一个数加上自己的 反转数，这样加k次后的和是不是回文数？<br>感觉能使用STL的reverse()函数的回文题都不是难题<br>记得不能直接相加，使用string进行加减</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> s1 <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">;</span>        s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp <span class="token operator">=</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">+</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">+</span> index<span class="token punctuation">;</span>            s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            s1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1023 Have Fun with Numbers</title>
      <link href="/2019/12/05/pat-jia-ji-a1023-have-fun-with-numbers/"/>
      <url>/2019/12/05/pat-jia-ji-a1023-have-fun-with-numbers/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Notice that the number 123456789 is a 9-digit number consisting exactly the numbers from 1 to 9, with no duplication. Double it we will obtain 246913578, which happens to be another 9-digit number consisting exactly the numbers from 1 to 9, only in a different permutation. Check to see the result if we double it again!</p><a id="more"></a><p>Now you are suppose to check if there are more numbers with this property. That is, double a given number with k digits, you are to tell if the resulting number consists of only a permutation of the digits in the original number.</p><p><strong>Input Specification:</strong></p><p>Each input contains one test case. Each case contains one positive integer with no more than 20 digits.</p><p><strong>Output Specification:</strong></p><p>For each test case, first print in a line “Yes” if doubling the input number gives a number that consists of only a permutation of the digits in the original number, or “No” if not. Then in the next line, print the doubled number.</p><p><strong>Sample Input:</strong></p><pre><code>1234567899</code></pre><p><strong>Sample Output:</strong></p><pre><code>Yes2469135798</code></pre><p><strong>Solution:</strong></p><p>问，一个数的double后，是不是还是由原来的数字组成的？<br>说白了就是问，一个数加上自己是不是自己的一个排列？</p><p>使用nums[10]来记录原来的数的各个数字出现的次数，然后与其和对比<br>或者直接排序后对比是不是一样的<br>注意：大数运算， 用字符实现加减</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">;</span>    cin <span class="token operator">>></span> s1<span class="token punctuation">;</span>    s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">+</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">+</span> index<span class="token punctuation">;</span>        s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        s2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s3 <span class="token operator">=</span> s2<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> s1 <span class="token operator">!=</span> s2<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1022 Digital Library</title>
      <link href="/2019/12/05/pat-jia-ji-a1022-digital-library/"/>
      <url>/2019/12/05/pat-jia-ji-a1022-digital-library/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>A Digital Library contains millions of books, stored according to their titles, authors, key words of their abstracts, publishers, and published years. Each book is assigned an unique 7-digit number as its ID. Given any query from a reader, you are supposed to output the resulting books, sorted in increasing order of their ID’s.</p><a id="more"></a><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains a positive integer N (≤) which is the total number of books. Then Nblocks follow, each contains the information of a book in 6 lines:</p><pre><code>* Line #1: the 7-digit ID number;* Line #2: the book title -- a string of no more than 80 characters;* Line #3: the author -- a string of no more than 80 characters;* Line #4: the key words -- each word is a string of no more than 10 characters without any white space, and the keywords are separated by exactly one space;* Line #5: the publisher -- a string of no more than 80 characters;* Line #6: the published year -- a 4-digit number which is in the range [1000, 3000].</code></pre><p>It is assumed that each book belongs to one author only, and contains no more than 5 key words; there are no more than 1000 distinct key words in total; and there are no more than 1000 distinct publishers.</p><p>After the book information, there is a line containing a positive integer M (≤) which is the number of user’s search queries. Then M lines follow, each in one of the formats shown below:</p><pre><code>* 1: a book title* 2: name of an author* 3: a key word* 4: name of a publisher* 5: a 4-digit number representing the year</code></pre><p><strong>Output Specification:</strong></p><p>For each query, first print the original query in a line, then output the resulting book ID’s in increasing order, each occupying a line. If no book is found, print Not Found instead.</p><p><strong>Sample Input:</strong></p><pre><code>31111111The Testing BookYue Chentest code debug sort keywordsZUCS Print20113333333Another Testing BookYue Chentest code sort keywordsZUCS Print220122222222The Testing BookCYLLkeywords debug bookZUCS Print2201161: The Testing Book2: Yue Chen3: keywords4: ZUCS Print5: 20113: blablabla</code></pre><p><strong>Sample Output:</strong></p><pre><code>1: The Testing Book111111122222222: Yue Chen111111133333333: keywords1111111222222233333334: ZUCS Print11111115: 2011111111122222223: blablablaNot Found</code></pre><p><strong>Solution:</strong></p><p>使用map映射：</p><p>第一种方法<br>以时间换空间，就是个ID保留一组信息，查询时遍历查询<br>但可能导致时间复杂度过大</p><p>第二种方法[推荐使用方法二]<br>以空间换时间，每种信息对应一个ID，查找时，时间复杂度为O(1)<br>但可能导致空间复杂度太大</p><p>注意一些字符输入的细节</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>map<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    string str<span class="token punctuation">,</span> substr<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                cin <span class="token operator">>></span> id<span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                istringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>ss<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    ss <span class="token operator">>></span> substr<span class="token punctuation">;</span>                    map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>substr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cin <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        id <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> map<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not Found"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">=</span> map<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ptr <span class="token operator">!=</span> map<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ptr<span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%07d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1021 Deepest Root</title>
      <link href="/2019/12/05/pat-jia-ji-a1021-deepest-root/"/>
      <url>/2019/12/05/pat-jia-ji-a1021-deepest-root/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>A graph which is connected and acyclic can be considered a tree. The height of the tree depends on the selected root. Now you are supposed to find the root that results in a highest tree. Such a root is called the deepest root.</p><a id="more"></a><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains a positive integer N (≤) which is the number of nodes, and hence the nodes are numbered from 1 to N. Then N−1 lines follow, each describes an edge by given the two adjacent nodes’ numbers.</p><p><strong>Output Specification:</strong></p><p>For each test case, print each of the deepest roots in a line. If such a root is not unique, print them in increasing order of their numbers. In case that the given graph is not a tree, print Error: K componentswhere K is the number of connected components in the graph.</p><p><strong>Sample Input 1:</strong></p><pre><code>51 21 31 42 5</code></pre><p><strong>Sample Output 1:</strong></p><pre><code>345</code></pre><p><strong>Sample Input 2:</strong></p><pre><code>51 31 42 53 4</code></pre><p><strong>Sample Output 2:</strong></p><pre><code>Error: 2 components</code></pre><p><strong>Solution:</strong></p><p>求树的最深度<br>首先求出是否为一个连通块，不是的话，那就直接输出ERROR<br>都使用DFS，求连通块和最深度</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> maxDeep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>v<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span>visit<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>res<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    visit<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">[</span>v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">calComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> nums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>nums<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> deep<span class="token punctuation">)</span><span class="token punctuation">{</span>    visit<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>deep <span class="token operator">></span> maxDeep<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        maxDeep <span class="token operator">=</span> deep<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>deep <span class="token operator">==</span> maxDeep<span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">[</span>v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    visit<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nums <span class="token operator">=</span> <span class="token function">calComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Error: "</span> <span class="token operator">&lt;&lt;</span> nums <span class="token operator">&lt;&lt;</span> <span class="token string">" components"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    visit<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ptr <span class="token operator">!=</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ptr<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的深度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1020 Tree Traversals</title>
      <link href="/2019/12/05/pat-jia-ji-a1020-tree-traversals/"/>
      <url>/2019/12/05/pat-jia-ji-a1020-tree-traversals/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Suppose that all the keys in a binary tree are distinct positive integers. Given the postorder and inorder traversal sequences, you are supposed to output the level order traversal sequence of the corresponding binary tree.</p><a id="more"></a><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤), the total number of nodes in the binary tree. The second line gives the postorder sequence and the third line gives the inorder sequence. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the level order traversal sequence of the corresponding binary tree. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p><p><strong>Sample Input:</strong></p><pre><code>72 3 1 5 7 6 41 2 3 4 5 6 7</code></pre><p><strong>Sample Output:</strong></p><pre><code>4 1 6 3 5 7 2</code></pre><p><strong>Solution:</strong></p><p>已知后序遍历和中序遍历输出层序遍历<br>这里是使用重构二叉树来求解的<br>当然也可以不用重构二叉树，直接根据数值的数组位置即可</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    Node <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">v</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">l</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>pos<span class="token punctuation">,</span> in<span class="token punctuation">,</span> level<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>Node<span class="token operator">*</span> <span class="token function">reCreateTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> inL<span class="token punctuation">,</span> <span class="token keyword">int</span> inR<span class="token punctuation">,</span> <span class="token keyword">int</span> posL<span class="token punctuation">,</span> <span class="token keyword">int</span> posR<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inL <span class="token operator">></span> inR<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    Node<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>posR<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> inL<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> inR<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pos<span class="token punctuation">[</span>posR<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            k <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    m <span class="token operator">=</span> k <span class="token operator">-</span> inL<span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span>l <span class="token operator">=</span> <span class="token function">reCreateTree</span><span class="token punctuation">(</span>inL<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> posL<span class="token punctuation">,</span> posL <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span>r <span class="token operator">=</span> <span class="token function">reCreateTree</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inR<span class="token punctuation">,</span> posL <span class="token operator">+</span> m<span class="token punctuation">,</span> posR <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span>q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node<span class="token operator">*</span> p <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        level<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>l <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>r <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    pos<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        cin <span class="token operator">>></span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        cin <span class="token operator">>></span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    Node<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token function">reCreateTree</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">levelOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1019 General Palindromic Numberr</title>
      <link href="/2019/12/05/pat-jia-ji-a1019-general-palindromic-numberr/"/>
      <url>/2019/12/05/pat-jia-ji-a1019-general-palindromic-numberr/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>A number that will be the same when it is written forwards or backwards is known as a Palindromic Number. For example, 1234321 is a palindromic number. All single digit numbers are palindromic numbers.</p><a id="more"></a><p>Although palindromic numbers are most often considered in the decimal system, the concept of palindromicity can be applied to the natural numbers in any numeral system. Consider a number N&gt;0 in base b≥2, where it is written in standard notation with k+1 digits a​i​​ as (. Here, as usual, 0 for all i and a​k​​ is non-zero. Then N is palindromic if and only if a​i​​=a​k−i​​ for all i. Zero is written 0 in any base and is also palindromic by definition.</p><p>Given any positive decimal integer N and a base b, you are supposed to tell if N is a palindromic number in base b.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case consists of two positive numbers N and b, where 0 is the decimal number and 2 is the base. The numbers are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, first print in one line Yes if N is a palindromic number in base b, or No if not. Then in the next line, print N as the number in base b in the form “a​k​​ a​k−1​​ … a​0​​”. Notice that there must be no extra space at the end of output.</p><p><strong>Sample Input 1:</strong></p><pre><code>27 2</code></pre><p><strong>Sample Output 1:</strong></p><pre><code>Yes1 1 0 1 1</code></pre><p><strong>Sample Input 2:</strong></p><pre><code>121 5</code></pre><p><strong>Sample Output 2:</strong></p><pre><code>No4 4 1</code></pre><p><strong>Solution:</strong></p><p>题意：</p><p>根据指定的进制，将给出的数进行转换<br>然后问，是不是回文数字？</p><p>很简单啦，直接使用STL里面的reverse()函数即可</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> B<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span>res<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>N <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>N<span class="token operator">%</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        N <span class="token operator">/</span><span class="token operator">=</span> B<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> N <span class="token operator">>></span> B<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span>    s1 <span class="token operator">=</span> s2 <span class="token operator">=</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1018 Public Bike Management</title>
      <link href="/2019/12/05/pat-jia-ji-a1018-public-bike-management/"/>
      <url>/2019/12/05/pat-jia-ji-a1018-public-bike-management/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>There is a public bike service in Hangzhou City which provides great convenience to the tourists from all over the world. One may rent a bike at any station and return it to any other stations in the city.</p><a id="more"></a><p>The Public Bike Management Center (PBMC) keeps monitoring the real-time capacity of all the stations. A station is said to be in perfect condition if it is exactly half-full. If a station is full or empty, PBMC will collect or send bikes to adjust the condition of that station to perfect. And more, all the stations on the way will be adjusted as well.</p><p>When a problem station is reported, PBMC will always choose the shortest path to reach that station. If there are more than one shortest path, the one that requires the least number of bikes sent from PBMC will be chosen.</p><p>The above figure illustrates an example. The stations are represented by vertices and the roads correspond to the edges. The number on an edge is the time taken to reach one end station from another. The number written inside a vertex S is the current number of bikes stored at S. Given that the maximum capacity of each station is 10. To solve the problem at S​3​​, we have 2 different shortest paths:</p><ol><li>PBMC -&gt; S​1​​ -&gt; S​3​​. In this case, 4 bikes must be sent from PBMC, because we can collect 1 bike from S​1​​ and then take 5 bikes to S​3​​, so that both stations will be in perfect conditions.</li></ol><ol start="2"><li>PBMC -&gt; S​2​​ -&gt; S​3​​. This path requires the same time as path 1, but only 3 bikes sent from PBMC and hence is the one that will be chosen.</li></ol><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 4 numbers: C​max​​ (≤), always an even number, is the maximum capacity of each station; N (≤), the total number of stations; S​p​​, the index of the problem station (the stations are numbered from 1 to N, and PBMC is represented by the vertex 0); and M, the number of roads. The second line contains N non-negative numbers C​i​​ (,) where each C​i​​ is the current number of bikes at S​i​​ respectively. Then M lines follow, each contains 3 numbers: S​i​​, S​j​​, and T​ij​​ which describe the time T​ij​​ taken to move betwen stations S​i​​ and S​j​​. All the numbers in a line are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, print your results in one line. First output the number of bikes that PBMC must send. Then after one space, output the path in the format: 0. Finally after another space, output the number of bikes that we must take back to PBMC after the condition of S​p​​ is adjusted to perfect.</p><p>Note that if such a path is not unique, output the one that requires minimum number of bikes that we must take back to PBMC. The judge’s data guarantee that such a path is unique.</p><p><strong>Sample Input:</strong></p><pre><code>10 3 3 56 7 00 1 10 2 10 3 31 3 12 3 1</code></pre><p><strong>Sample Output:</strong></p><pre><code>3 0-&gt;2-&gt;3 0</code></pre><p><strong>Solution:</strong></p><p>题意：</p><p>小黄车进行调度，每个站点不够的需要从公司运去，站点太多了的还需要带回去<br>其中路过的站点可以相互调度，但只能从出发点到终点单方向的</p><p>使用Dijkstra和DFS结合</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> theC<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> den<span class="token punctuation">,</span> cap<span class="token punctuation">[</span><span class="token number">505</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">505</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">505</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>father<span class="token punctuation">[</span><span class="token number">505</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Dijstra</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">path</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> INT32_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">visit</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> minD <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> minD <span class="token operator">></span> path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                index <span class="token operator">=</span> j<span class="token punctuation">;</span>                minD <span class="token operator">=</span> path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        visit<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> u <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">></span> path<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    path<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>                    father<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    father<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> path<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>                    father<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> minNeed <span class="token operator">=</span> INT32_MAX<span class="token punctuation">,</span> minBack <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>temp<span class="token punctuation">,</span> res<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> need <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> back <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> dis <span class="token operator">=</span> cap<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> theC <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dis <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>                back <span class="token operator">+</span><span class="token operator">=</span> dis<span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>back <span class="token operator">+</span> dis <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//带回去的可以补充缺少的</span>                    back <span class="token operator">+</span><span class="token operator">=</span> dis<span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token comment" spellcheck="true">//缺太多</span>                <span class="token punctuation">{</span>                    need <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>back <span class="token operator">+</span> dis<span class="token punctuation">)</span><span class="token punctuation">;</span>                    back <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>need <span class="token operator">&lt;</span> minNeed<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res <span class="token operator">=</span> temp<span class="token punctuation">;</span>            minNeed <span class="token operator">=</span> need<span class="token punctuation">;</span>            minBack <span class="token operator">=</span> back<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>need <span class="token operator">==</span>minNeed <span class="token operator">&amp;&amp;</span> back <span class="token operator">&lt;</span> minBack<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            minBack <span class="token operator">=</span> back<span class="token punctuation">;</span>            res <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> a <span class="token operator">:</span> father<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    temp<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> theC <span class="token operator">>></span> n <span class="token operator">>></span> den <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        cin <span class="token operator">>></span> cap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>        v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token function">Dijstra</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">DFS</span><span class="token punctuation">(</span>den<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> minNeed <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span> <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> minBack<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1017 Queueing at Bank</title>
      <link href="/2019/12/05/pat-jia-ji-a1017-queueing-at-bank/"/>
      <url>/2019/12/05/pat-jia-ji-a1017-queueing-at-bank/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Suppose a bank has K windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. All the customers have to wait in line behind the yellow line, until it is his/her turn to be served and there is a window available. It is assumed that no window can be occupied by a single customer for more than 1 hour.</p><a id="more"></a><p>Now given the arriving time T and the processing time P of each customer, you are supposed to tell the average waiting time of all the customers.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. For each case, the first line contains 2 numbers: N (≤) - the total number of customers, and K (≤) - the number of windows. Then N lines follow, each contains 2 times: HH:MM:SS - the arriving time, and P - the processing time in minutes of a customer. Here HH is in the range [00, 23], MM and SS are both in [00, 59]. It is assumed that no two customers arrives at the same time.</p><p>Notice that the bank opens from 08:00 to 17:00. Anyone arrives early will have to wait in line till 08:00, and anyone comes too late (at or after 17:00:01) will not be served nor counted into the average.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the average waiting time of all the customers, in minutes and accurate up to 1 decimal place.</p><p><strong>Sample Input:</strong></p><pre><code>7 307:55:00 1617:00:01 207:59:59 1508:01:00 6008:00:00 3008:00:02 208:03:00 10</code></pre><p><strong>Sample Output:</strong></p><pre><code>8.2</code></pre><p><strong>Solution:</strong></p><p>这道题与前面的排队题是一样的，关键在于时间处理上了</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span>v<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">windows</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hh<span class="token punctuation">,</span> mm<span class="token punctuation">,</span> ss<span class="token punctuation">,</span> tt<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d:%d:%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>hh<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mm<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ss<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hh <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">+</span> mm <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> ss <span class="token operator">&lt;</span> <span class="token number">17</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">)</span>            v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>hh <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">+</span> mm <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> ss<span class="token punctuation">,</span> tt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span>a<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>first <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>first<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            windows<span class="token punctuation">[</span>i<span class="token operator">%</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">?</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">:</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录的是其结束时间</span>            sum <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minTime <span class="token operator">=</span> windows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>windows<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> minTime<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                minTime <span class="token operator">=</span> windows<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                index <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        sum <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">></span> windows<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>windows<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        windows<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">></span> windows<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">:</span> windows<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录的是其结束时间</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>sum <span class="token operator">/</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1016 Phone Bills</title>
      <link href="/2019/12/05/pat-jia-ji-a1016-phone-bills/"/>
      <url>/2019/12/05/pat-jia-ji-a1016-phone-bills/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>A long-distance telephone company charges its customers by the following rules:</p><a id="more"></a><p>Making a long-distance call costs a certain amount per minute, depending on the time of day when the call is made. When a customer starts connecting a long-distance call, the time will be recorded, and so will be the time when the customer hangs up the phone. Every calendar month, a bill is sent to the customer for each minute called (at a rate determined by the time of day). Your job is to prepare the bills for each month, given a set of phone call records.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case has two parts: the rate structure, and the phone call records.</p><p>The rate structure consists of a line with 24 non-negative integers denoting the toll (cents/minute) from 00:00 - 01:00, the toll from 01:00 - 02:00, and so on for each hour in the day.</p><p>The next line contains a positive number N (≤), followed by N lines of records. Each phone call record consists of the name of the customer (string of up to 20 characters without space), the time and date (mm:dd:hh:mm), and the word on-line or off-line.</p><p>For each test case, all dates will be within a single month. Each on-line record is paired with the chronologically next record for the same customer provided it is an off-linerecord. Any on-line records that are not paired with an off-line record are ignored, as are off-line records not paired with an on-line record. It is guaranteed that at least one call is well paired in the input. You may assume that no two records for the same customer have the same time. Times are recorded using a 24-hour clock.</p><p><strong>Output Specification:</strong></p><p>For each test case, you must print a phone bill for each customer.</p><p>Bills must be printed in alphabetical order of customers’ names. For each customer, first print in a line the name of the customer and the month of the bill in the format shown by the sample. Then for each time period of a call, print in one line the beginning and ending time and date (dd:hh:mm), the lasting time (in minute) and the charge of the call. The calls must be listed in chronological order. Finally, print the total charge for the month in the format shown by the sample.</p><p><strong>Sample Input:</strong></p><pre><code>10 10 10 10 10 10 20 20 20 15 15 15 15 15 15 15 20 30 20 15 15 10 10 1010CYLL 01:01:06:01 on-lineCYLL 01:28:16:05 off-lineCYJJ 01:01:07:00 off-lineCYLL 01:01:08:03 off-lineCYJJ 01:01:05:59 on-lineaaa 01:01:01:03 on-lineaaa 01:02:00:01 on-lineCYLL 01:28:15:41 on-lineaaa 01:05:02:24 on-lineaaa 01:04:23:59 off-line</code></pre><p><strong>Sample Output:</strong></p><pre><code>CYJJ 0101:05:59 01:07:00 61 $12.10Total amount: $12.10CYLL 0101:06:01 01:08:03 122 $24.4028:15:41 28:16:05 24 $3.85Total amount: $28.25aaa 0102:00:01 04:23:59 4318 $638.80Total amount: $638.80</code></pre><p><strong>Solution:</strong></p><p>题意：</p><p>就是求一个电话煲的话费单，记得电话的接与挂要匹配上</p><p>然后就是注意时间处理了，处理不好就巨麻烦</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">calMoney</span><span class="token punctuation">(</span>string str<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> d<span class="token punctuation">,</span> h<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    d <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    h <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> str<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    m <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    money <span class="token operator">+</span><span class="token operator">=</span> cost<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> d <span class="token operator">+</span> cost<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">*</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> h<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        money <span class="token operator">+</span><span class="token operator">=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>    time <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> d <span class="token operator">+</span> h <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>    <span class="token keyword">return</span> money<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        cost<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">,</span>less<span class="token operator">&lt;</span>string<span class="token operator">>></span>data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//外部用名字排序,名字是用降序排序，内部用时间排序,时间时用默认升序排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string name<span class="token punctuation">,</span> time<span class="token punctuation">,</span> type<span class="token punctuation">;</span>        cin <span class="token operator">>></span> name <span class="token operator">>></span> time <span class="token operator">>></span> type<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span>time<span class="token punctuation">]</span> <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ptr <span class="token operator">!=</span> data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ptr<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> et <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        string sl<span class="token punctuation">,</span>el<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> ptr<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> ptr<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> ptr<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> pt <span class="token operator">=</span> it<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>second <span class="token operator">==</span> <span class="token string">"off-line"</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">--</span>pt<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>second <span class="token operator">==</span> <span class="token string">"on-line"</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> ptr<span class="token operator">-</span><span class="token operator">></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                    f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                s <span class="token operator">=</span> <span class="token function">calMoney</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">,</span> et<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">calMoney</span><span class="token punctuation">(</span>pt<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>                sl<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>pt<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> pt<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                el<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>it<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> it<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> sl <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> el <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>et <span class="token operator">-</span> st<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"$%0.2f\n"</span><span class="token punctuation">,</span> s<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Total amount: $%0.2f\n"</span><span class="token punctuation">,</span> sum<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1015 Reversible Prime</title>
      <link href="/2019/12/05/pat-jia-ji-a1015-reversible-prime/"/>
      <url>/2019/12/05/pat-jia-ji-a1015-reversible-prime/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>A reversible prime in any number system is a prime whose “reverse” in that number system is also a prime. For example in the decimal system 73 is a reversible prime because its reverse 37 is also a prime.</p><a id="more"></a><p>Now given any two positive integers N (&lt;) and D (1), you are supposed to tell if N is a reversible prime with radix D.</p><p><strong>Input Specification:</strong></p><p>The input file consists of several test cases. Each case occupies a line which contains two integers N and D. The input is finished by a negative N.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line Yes if N is a reversible prime with radix D, or No if not.</p><p><strong>Sample Input:</strong></p><pre><code>73 1023 223 10-2</code></pre><p><strong>Sample Output:</strong></p><pre><code>YesYesNo</code></pre><p><strong>Solution:</strong></p><p>题意：</p><p>根据给出的进制将数反转，请问反转后是不是仍然为素数</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> d<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">*</span>i <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getDeciaml</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        res <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token operator">*</span>temp<span class="token punctuation">;</span>        temp <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>string <span class="token function">getString</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> x <span class="token punctuation">)</span><span class="token punctuation">{</span>    string s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        s <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> x <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到的是反向的进制数</span>        num <span class="token operator">/</span><span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string str<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> d<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        str <span class="token operator">=</span> <span class="token function">getString</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到的就是反转二进制</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token function">getDeciaml</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 素数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1014 Waiting in Linee</title>
      <link href="/2019/12/05/pat-jia-ji-a1014-waiting-in-linee/"/>
      <url>/2019/12/05/pat-jia-ji-a1014-waiting-in-linee/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Suppose a bank has N windows open for service. There is a yellow line in front of the windows which devides the waiting area into two parts. The rules for the customers to wait in line are:</p><a id="more"></a><ul><li><p>The space inside the yellow line in front of each window is enough to contain a line with M customers. Hence when all the N lines are full, all the customers after (and including) the (st one will have to wait in a line behind the yellow line.</p></li><li><p>Each customer will choose the shortest line to wait in when crossing the yellow line. If there are two or more lines with the same length, the customer will always choose the window with the smallest number. </p></li><li><p>Customer​i​​ will take T​i​​ minutes to have his/her transaction processed.</p></li><li><p>The first N customers are assumed to be served at 8:00am.</p></li></ul><p>Now given the processing time of each customer, you are supposed to tell the exact time at which a customer has his/her business done.</p><p>For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, customer​1​​ is served at window​1​​while customer​2​​ is served at window​2​​. Customer​3​​ will wait in front of window​1​​ and customer​4​​ will wait in front of window​2​​. Customer​5​​ will wait behind the yellow line.</p><p>At 08:01, customer​1​​ is done and customer​5​​ enters the line in front of window​1​​ since that line seems shorter now. Customer​2​​ will leave at 08:02, customer​4​​ at 08:06, customer​3​​ at 08:07, and finally customer​5​​ at 08:10.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case starts with a line containing 4 positive integers: N (≤, number of windows), M (≤, the maximum capacity of each line inside the yellow line), K (≤, number of customers), and Q (≤, number of customer queries).</p><p>The next line contains K positive integers, which are the processing time of the Kcustomers.</p><p>The last line contains Q positive integers, which represent the customers who are asking about the time they can have their transactions done. The customers are numbered from 1 to K.</p><p><strong>Output Specification:</strong></p><p>For each of the Q customers, print in one line the time at which his/her transaction is finished, in the format HH:MM where HH is in [08, 17] and MM is in [00, 59]. Note that since the bank is closed everyday after 17:00, for those customers who cannot be served before 17:00, you must output Sorry instead.</p><p><strong>Sample Input:</strong></p><pre><code>2 2 7 51 2 6 4 3 534 23 4 5 6 7</code></pre><p><strong>Sample Output:</strong></p><pre><code>08:0708:0608:1017:00Sorry</code></pre><p><strong>Solution:</strong><br>题的大意：</p><p>N个窗口，每个窗口线内排队M个人，其他人在线外等候<br>哪个窗口有空缺，那么就上那个窗口去排队<br>当有多个窗口空缺，则选择小号排队<br>问每个人从早上8.00到他办完业务的具体时间</p><p>题解：<br>使用队列来代替窗口<br>有个点得注意一下，就是当有个人排队在16：59开始办业务，<br>就算他要办1000分钟的业务，他也是算能办上业务的，不应输出sorry</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> K<span class="token punctuation">,</span> Q<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> N <span class="token operator">>></span> M <span class="token operator">>></span> K <span class="token operator">>></span> Q<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token function">windows</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//N个窗口</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">endTime</span><span class="token punctuation">(</span>K <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token function">Sorry</span><span class="token punctuation">(</span>K <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//若前面那个人的业务办理时间超过下班时间，那么你是排不上的</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> time<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> K<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> N <span class="token operator">*</span> M<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//先将窗口的位子按序排满，存的是该人完成业务的时间</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>windows<span class="token punctuation">[</span>i<span class="token operator">%</span>N<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                time <span class="token operator">=</span> windows<span class="token punctuation">[</span>i<span class="token operator">%</span>N<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>                windows<span class="token punctuation">[</span>i<span class="token operator">%</span>N<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>                Sorry<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> windows<span class="token punctuation">[</span>i<span class="token operator">%</span>N<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">540</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                time <span class="token operator">=</span> a<span class="token punctuation">;</span>                windows<span class="token punctuation">[</span>i<span class="token operator">%</span>N<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token comment" spellcheck="true">//线外的人选择窗口排队</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> minTime <span class="token operator">=</span> windows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找到最先出现空位的窗口，然后去选择该窗口排队</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>minTime <span class="token operator">></span> windows<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    index <span class="token operator">=</span> j<span class="token punctuation">;</span>                    minTime <span class="token operator">=</span> windows<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Sorry<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> windows<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">540</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            time <span class="token operator">=</span> windows<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>            windows<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排完对队就离开</span>            windows<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//排队</span>        <span class="token punctuation">}</span>        endTime<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a<span class="token punctuation">;</span>        time <span class="token operator">=</span> endTime<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Sorry<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sorry\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d:%02d\n"</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token operator">+</span> time <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">,</span> time <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1013 Battle Over Cities</title>
      <link href="/2019/12/05/pat-jia-ji-a1013-battle-over-cities/"/>
      <url>/2019/12/05/pat-jia-ji-a1013-battle-over-cities/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>It is vitally important to have all the cities connected by highways in a war. If a city is occupied by the enemy, all the highways from/toward that city are closed. We must know immediately if we need to repair any other highways to keep the rest of the cities connected. Given the map of cities which have all the remaining highways marked, you are supposed to tell the number of highways need to be repaired, quickly.</p><a id="more"></a><p>For example, if we have 3 cities and 2 highways connecting city​1​​-city​2​​ and city​1​​-city​3​​. Then if city​1​​ is occupied by the enemy, we must have 1 highway repaired, that is the highway city​2​​-city​3​​.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case starts with a line containing 3 numbers N (&lt;), M and K, which are the total number of cities, the number of remaining highways, and the number of cities to be checked, respectively. Then M lines follow, each describes a highway by 2 integers, which are the numbers of the cities the highway connects. The cities are numbered from 1 to N. Finally there is a line containing Knumbers, which represent the cities we concern.</p><p><strong>Output Specification:</strong></p><p>For each of the K cities, output in a line the number of highways need to be repaired if that city is lost.</p><p><strong>Sample Input:</strong></p><pre><code>3 2 31 21 31 2 3</code></pre><p><strong>Sample Output:</strong></p><pre><code>100</code></pre><p><strong>Solution:</strong></p><p>题意：</p><p>城市之间有马路相互连着，请问当一座城市被摧毁时，要想其他城市保持着相互连接，需要加修几条马路</p><p>题解：</p><p>就是一道连通块问题，计算剩下的城市有几个连通块，一个则是相互连着的，n个连通块需要n-1条马路</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> res<span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">bool</span> visit<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    visit<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> b <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> b<span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">fill</span><span class="token punctuation">(</span>visit<span class="token punctuation">,</span> visit <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> b<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token function">DFS</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS,连通块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A10012 The Best Rank</title>
      <link href="/2019/12/05/pat-jia-ji-a1012-the-best-rank/"/>
      <url>/2019/12/05/pat-jia-ji-a1012-the-best-rank/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: C - C Programming Language, M - Mathematics (Calculus or Linear Algrbra), and E - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p><a id="more"></a><p>For example, The grades of C, M, E and A - Average of 4 students are given as the following:</p><pre><code>StudentID  C  M  E  A310101     98 85 88 90310102     70 95 88 84310103     82 87 94 88310104     91 91 91 91</code></pre><p>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case starts with a line containing 2 numbers N and M (≤), which are the total number of students, and the number of students who would check their ranks, respectively. Then N lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of C, M and E. Then there are M lines, each containing a student ID.</p><p><strong>Output Specification:</strong></p><p>For each of the M students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p><p>The priorities of the ranking methods are ordered as A &gt; C &gt; M &gt; E. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p><p>If a student is not on the grading list, simply output N/A.</p><p><strong>Sample Input:</strong></p><pre><code>5 6310101 98 85 88310102 70 95 88310103 82 87 94310104 91 91 91310105 85 90 90310101310102310103310104310105999999</code></pre><p>Sample Output:</p><pre><code>1 C1 M1 E1 A3 AN/A</code></pre><p><strong>Solution:</strong></p><p>题意：</p><p>就是根据成绩进行排序，输出的排名是选择最好的名次输出<br>记得得分一样的人排名是一样的</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">,</span> C<span class="token punctuation">,</span> M<span class="token punctuation">,</span> E<span class="token punctuation">,</span> A<span class="token punctuation">,</span> rankC<span class="token punctuation">,</span> rankM<span class="token punctuation">,</span> rankE<span class="token punctuation">,</span> rankA<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Node a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> rank<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">.</span>rankA<span class="token punctuation">,</span>a<span class="token punctuation">.</span>rankC<span class="token punctuation">,</span>a<span class="token punctuation">.</span>rankM<span class="token punctuation">,</span>a<span class="token punctuation">.</span>rankE <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'E'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> rank<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> min <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Node<span class="token operator">></span>students<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Node<span class="token operator">></span>v<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> id<span class="token punctuation">,</span> C<span class="token punctuation">,</span> M<span class="token punctuation">,</span> E<span class="token punctuation">;</span>        cin <span class="token operator">>></span> id <span class="token operator">>></span> C <span class="token operator">>></span> M <span class="token operator">>></span> E<span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> C<span class="token punctuation">,</span> M<span class="token punctuation">,</span> E<span class="token punctuation">,</span> C <span class="token operator">+</span> M <span class="token operator">+</span> E<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Node a<span class="token punctuation">,</span> Node b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>A <span class="token operator">></span> b<span class="token punctuation">.</span>A<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>A <span class="token operator">==</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>A<span class="token punctuation">)</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rankA <span class="token operator">=</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rankA<span class="token punctuation">;</span>        <span class="token keyword">else</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rankA <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Node a<span class="token punctuation">,</span> Node b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>C <span class="token operator">></span> b<span class="token punctuation">.</span>C<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>C <span class="token operator">==</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>C<span class="token punctuation">)</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rankC <span class="token operator">=</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rankC<span class="token punctuation">;</span>        <span class="token keyword">else</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rankC <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Node a<span class="token punctuation">,</span> Node b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>M <span class="token operator">></span> b<span class="token punctuation">.</span>M<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>M <span class="token operator">==</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>M<span class="token punctuation">)</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rankM <span class="token operator">=</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rankM<span class="token punctuation">;</span>        <span class="token keyword">else</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rankM <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Node a<span class="token punctuation">,</span> Node b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>E <span class="token operator">></span> b<span class="token punctuation">.</span>E<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>E <span class="token operator">==</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>E<span class="token punctuation">)</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rankE <span class="token operator">=</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rankE<span class="token punctuation">;</span>        <span class="token keyword">else</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rankE <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> a <span class="token operator">:</span> v<span class="token punctuation">)</span>        students<span class="token punctuation">[</span>a<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> id<span class="token punctuation">;</span>        cin <span class="token operator">>></span> id<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">!=</span> students<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">print</span><span class="token punctuation">(</span>students<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"N/A"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A10011 World Cup Betting</title>
      <link href="/2019/12/05/pat-jia-ji-a1011-world-cup-betting/"/>
      <url>/2019/12/05/pat-jia-ji-a1011-world-cup-betting/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>With the 2010 FIFA World Cup running, football fans the world over were becoming increasingly excited as the best players from the best teams doing battles for the World Cup trophy in South Africa. Similarly, football betting fans were putting their money where their mouths were, by laying all manner of World Cup bets.</p><a id="more"></a><p>Chinese Football Lottery provided a “Triple Winning” game. The rule of winning was simple: first select any three of the games. Then for each selected game, bet on one of the three possible results – namely W for win, T for tie, and L for lose. There was an odd assigned to each result. The winner’s odd would be the product of the three odds times 65%.</p><p>For example, 3 games’ odds are given as the following:<br> W    T    L<br>1.1  2.5  1.7<br>1.2  3.1  1.6<br>4.1  1.2  1.1</p><p>To obtain the maximum profit, one must buy W for the 3rd game, T for the 2nd game, and T for the 1st game. If each bet takes 2 yuans, then the maximum profit would be ( yuans (accurate up to 2 decimal places).</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains the betting information of 3 games. Each game occupies a line with three distinct odds corresponding to W, T and L.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the best bet of each game, and the maximum profit accurate up to 2 decimal places. The characters and the number must be separated by one space.</p><p><strong>Sample Input:</strong></p><pre><code>1.1 2.5 1.71.2 3.1 1.64.1 1.2 1.1</code></pre><p><strong>Sample Output:</strong></p><pre><code>T T W 39.31</code></pre><p><strong>Solution:</strong></p><p>不用多说，就是一个水题，找到最大赔率就行</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> res<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> w<span class="token punctuation">,</span> t<span class="token punctuation">,</span> l<span class="token punctuation">,</span> maxV<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> w <span class="token operator">>></span> t <span class="token operator">>></span> l<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">>=</span> t<span class="token operator">&amp;&amp;</span> w <span class="token operator">>=</span> l<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'W'</span><span class="token punctuation">;</span>            num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">>=</span> l <span class="token operator">&amp;&amp;</span> t <span class="token operator">>=</span> w<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'T'</span><span class="token punctuation">;</span>            num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>            num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c %c %c %.2f"</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.65</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈理想主义者——罗永浩</title>
      <link href="/2019/12/05/tan-li-xiang-zhu-yi-zhe-luo-yong-hao/"/>
      <url>/2019/12/05/tan-li-xiang-zhu-yi-zhe-luo-yong-hao/</url>
      
        <content type="html"><![CDATA[<hr><p>声明：</p><p>这篇文章是我第一次就我本人喜爱看社论而有感写的，本人纯理工男，情商为负数，不太会写作，此博文是由于自己看了两篇有关罗永浩的长文，有所感悟而写。 此文纯属个人看法，没有任何针对性，若内容有所不实，望联系纠正。感谢浏览。</p><hr><a id="more"></a><h2 id="第一次认识老罗"><a href="#第一次认识老罗" class="headerlink" title="第一次认识老罗"></a>第一次认识老罗</h2><p>记得那好像是大一的时候，我当时在图书馆中看到了一本书，名：《我的奋斗》，当时，我立马停住了脚步，心想，这不是本禁书么，什么时候希特勒的书流出来了，还是光明正大的在大学图书馆里。心里一小波激动（毕竟禁书是件令人心动的事情），把书费力的从书架里抽出来，然而，映入眼帘的是封面上的一个中年肥胖男，看了看作者，我才恍然大悟，原来大名鼎鼎的罗永浩就长这样呀！！！（说实话，大跌眼镜）。然后我撇了撇嘴，又把书费力的放回去了。因为我早就听说了他是个嘴炮（就是网上所谓的相声先生），我并没有时间耗在这本书上。此时，老罗在我心中的评分：50分。不及格，因为我感觉实力派不能靠嘴皮子；50分是因为我怕自己太片面了，又对人家不了解，而且身边还一大堆他的铁粉呢。</p><h2 id="再次认识老罗"><a href="#再次认识老罗" class="headerlink" title="再次认识老罗"></a>再次认识老罗</h2><p>我隔壁宿舍，小宇，算是个小极客吧。当时的我，特别佩服他们那些隔三差五就换电子产品的人，而自己手里握着高考老爸奖励的800原3G的vivo，要知道，我上大学时，已经是4G时代了。<br>小宇经常关注老罗，每次老罗有宣讲会，他都会在空间里分享，所以，这样我也开始关注老罗了，只不过是被动关注而已。<br>偶尔有一天，我第一次听说了“锤子”手机，小宇买了，当时的我生活很尴尬，所以从来不会去关注那些电子产品，更不要说他们的性能了，因为看了也没钱买，还不如不看，看了闹心。所以以下这段是自己道听的。<br>当时的锤子手机号称运行内存要达到4G,存储内存要达到256G（可能是128G），我心里立马震惊了。虽然当时的我刚上大学（2014年），对手机这些性能不太了解，可是对比自己手上储存8G，运行526M的手机，锤子的配置，让我震惊，心想，mmp,这锤子手机是要超越苹果呀，因为当时还没有哪台手机有这么高的配置（可能我见识短），特别是看了小宇的锤子手机，感觉特别帅气，特别大气，特别有科幻感，特别喜欢他的外观，感觉比苹果都好看。从此，在我心里，有个NB的手机——锤子手机。罗永浩，NB呀，我佩服你，对，就是要让国产手机超越苹果！！！！（因为苹果太贵了，希望有个手机性能超越苹果，价格就像苹果。哈哈哈）<br>老罗，NB，80分，优秀了，民族的希望！！！</p><h2 id="第一看老罗的节目"><a href="#第一看老罗的节目" class="headerlink" title="第一看老罗的节目"></a>第一看老罗的节目</h2><p>有一次刷手机，看到了老罗的一档节目（不知道这个视频是哪年的），这是老罗在我心里沉埋了多年（至少2年吧），锤子手机，我要狠狠想才能想起了。这个视频，是关于老罗怒怼一个手机修理商（好像叫华强吧），这个厂商好像是承诺使用苹果原厂合格配件帮你修理苹果产品。<br>我记得老罗就“原厂”，“合格”,这两个关键词怒怼采访者（好像是厂商的创始人）。说苹果产品的所有配件有严格的把关，根本不可能流出来，你是怎么得到的配件？你不就是黑心的厂商么，打着原配件的幌子来谋取利益。<br>然后厂商说自己有内部人员子在苹果配件厂，也就是说有路子弄到配件。<br>老罗怼，怎么可能拿到合格配件，一定就是生产的不合格配件，苹果对不合格配件把控肯定不严，你们就是用的不合格产品来骗消费者的。。。。<br>大致就围绕者老罗怼厂商打着“合格原配件”的幌子来展开的。<br>从这个视频上，我有一次认识了老罗，感觉他的确是个有情怀的人，当他的理想主义太理想了，以至于让人恶心。<br>社会上有些事情，是个成年人就懂得里面的小九九，你却唱着愤世嫉俗的心态，把他拉出来唱你所谓的平反，看不惯的高调。表面你在为百姓呐喊公平正义，但我感觉你是在作秀。<br>为什么，世界上不平的事多了去了，然而大部分事实是一个愿打一个愿挨的。就拿上面这件事情来讲，苹果用户会选择那家厂商修理？说白了就是图便宜，你不图便宜，手机专卖店可以修了呀，你完全可以选择专卖店呀！！！<br>而你老罗拿出来讲，大声说处掩藏在浮沉下的事实。那么，请问，你说出来这种现象就能解决么？<br>不，不能，你有本事就造出更合格的配件，不然不要唱高调，讲情怀！！！<br>老罗，对不起，30分。</p><h2 id="鸟巢——TNT"><a href="#鸟巢——TNT" class="headerlink" title="鸟巢——TNT"></a>鸟巢——TNT</h2><p>记得好像去年吧，为了更好的了解老罗，我期待了他在鸟巢的关于TNT电脑的发布会，我之所以看，一个原因是他造势的成功，再一个是我很好奇他做的电脑怎么样。<br>不记得发布会是多久，好像是2+H,整个过程我都看了，好像当时还是坚果的一个新机的发布会。对手机的印象我不记得了，但对他的TNT电脑我可要 吐槽一番。<br>他的电脑是类似于苹果的台式一体机。但是，吐槽开始。<br>首先，你做的那么大，是台式机没错，可是你却做成触屏，还声称键盘和鼠标是要淘汰的。那么亲，请问一下，你让平板情何以堪？你见过拿平板办公的么？<br>你觉得是你手写效率高，还是键盘输入效率高？<br>接下来，老罗就来解答这个问题了，人家用的可是语音识别呢，还是科大讯飞的哦，并且 他现场开始表演他引以为傲的一套办公软件，号称超越office，不说现场多翻车吧，我就按老罗不停的喊理解万岁来理解一下翻车现场。<br>就功能而言，这套软件优点在于 他可以根据你大致的需求生成一个基本符合你所需的ppt模板（他只演示了PPT），图片局中，字体改写什么的都直接可以 语音设置，太爽了！！！！<br>然而，首先，你让全公司你一言我一语 的对着电脑语音，你觉得识别率多高？公司老板感觉如何？<br>再而，最重要的一点就是，大哥，你卖电脑还是卖软件？？？主题都偏了，我完全没有听他介绍电脑配置，你这样承纯属忽悠。<br>老罗，你无愧于相声二字，此时0分。。。</p><h2 id="两篇长文——老罗的失败注定"><a href="#两篇长文——老罗的失败注定" class="headerlink" title="两篇长文——老罗的失败注定"></a>两篇长文——老罗的失败注定</h2><p>第一篇长文好像是人物公众号的推文，是老罗锤子公司的类似于采访记录吧。<br>通过对老罗在锤子公司的一些作为，总结为：老罗的失败是注定的。<br>通过这篇长文，我知道了，老罗真是个纯粹理想主义者，一个从不从实际出发的人，却选择了做技术，其后果可想而知，必定惨不忍睹。<br>记得文中有一幕，说关于手机天线的问题。老罗想打造一款纯金属的手机外身，而技术人员极力反对，稍微有点物理常识的人都知道，金属是会屏蔽电磁信号的，你做成金属的是想让手机砖头么？<br>而老罗的怼就像赖皮一样，我要的是美观，你身为技术人员，怎么做成是你的事。这就是一个没有技术的人来指挥技术的可怕之处！！！</p><p>在一篇长文，就是今天在雪球上的推文了，这篇推文促使了我写这篇文章的动力。<br>推文将老罗从出生到现在48年的时光全部 过了一遍，把老罗一生注定失败的原因讲的可谓明明白白。<br>家境优异的他，却从小我行我素（很好奇，身为政府官员的父母却不会教育孩子），17却早早辍学，父母却还支持。辍学的他，为了经济独立，倒过药，做过传销演说。<br>凭着自己的一张嘴，他顺利进入了新东方，而馋渴着新东方高薪，靠相声忽悠了5年的工作，却不满俞敏洪的利益驱使的为人，愤怒离开了新东方。<br>此处，呵呵，你若是金钱如粪土，何必委屈大驾入新东方？!你就是伪君子。<br>后来就是人们所知道，靠着传销的经验，成功将一群“天才”招致麾下，成立了锤子科技。然而整天讲民主，在公司却专权的他，最终让他的理想主义给打败了。<br>负分，我几乎不会给人负分，老罗，你是一个。</p><h1 id="截稿"><a href="#截稿" class="headerlink" title="截稿"></a>截稿</h1><p>也许，还有很多人感觉老罗的理想是值得学习的，精神是可嘉的。<br>但我想说的是，他就是一个从小娇生惯养的，一个被父母宠坏了乖宝宝。<br>一个没有技术的人，妄想凭着情怀做技术中的no.1，这叫一想天开，更是白日做梦。他事事尽心，然而却败得一塌糊涂。我只想问一句，老罗，你知道职业规划么？一个从未给自己定位的人，注定成功不了！<br>知己知彼，百战百胜，前提是知己。</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>至于后面会不会接着写，就看老罗的热度了，没有热度，那就没法被动关注了。<br>其实，我真心希望老罗淡出，好好琢磨，好好总结一下自己的经历，静下心，重新定位自己，希望下次你上热榜是个正面消息。。。</p><p>一般为</p>]]></content>
      
      
      <categories>
          
          <category> 生活百味 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A10010 Radix</title>
      <link href="/2019/12/05/pat-jia-ji-a1010-radix/"/>
      <url>/2019/12/05/pat-jia-ji-a1010-radix/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is yes, if 6 is a decimal number and 110 is a binary number.</p><a id="more"></a><p>Now for any pair of positive integers N​1​​ and N​2​​, your task is to find the radix of one number while that of the other is given.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:</p><p>N1 N2 tag radix</p><p>Here N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, a-z } where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number radix is the radix of N1 if tag is 1, or of N2 if tag is 2.</p><p><strong>Output Specification:</strong></p><p>For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print Impossible. If the solution is not unique, output the smallest possible radix.</p><p><strong>Sample Input 1:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token number">6</span> <span class="token number">110</span> <span class="token number">1</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Sample Output 1:</strong></p><pre><code>2</code></pre><p><strong>Sample Input 2:</strong></p><pre><code>1 ab 1 2</code></pre><p><strong>Sample Output 2:</strong></p><pre><code>Impossible</code></pre><p><strong>Solution:</strong></p><p>题意：</p><p>根据给出的数，求出另一个数的满足要求的进制</p><p>题解：</p><p>这题不难，主要是要考虑数据溢出的问题(巨恶心，搞了我半天)<br>记得要使用二分法去寻找匹配的进制（这个一超时就能想起）</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> t<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据进制计算十进制数值</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">calValue</span><span class="token punctuation">(</span>string x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">atoi</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> k <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        k <span class="token operator">*</span><span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">calRadix</span><span class="token punctuation">(</span>string x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//首先计算x中的最大数值</span>    <span class="token keyword">int</span> maxV <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> a <span class="token operator">:</span> x<span class="token punctuation">)</span>        maxV <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxV<span class="token punctuation">,</span> <span class="token function">isalpha</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> nV <span class="token operator">=</span> <span class="token function">calValue</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算n的十进制数</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> L <span class="token operator">=</span> maxV <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R <span class="token operator">=</span> nV <span class="token operator">></span> <span class="token number">36</span> <span class="token operator">?</span> nV <span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一定得使用二分法</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mid <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token punctuation">(</span>R <span class="token operator">-</span> L<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> mV <span class="token operator">=</span> <span class="token function">calValue</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nV <span class="token operator">==</span> mV<span class="token punctuation">)</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mV <span class="token operator">></span> nV <span class="token operator">||</span> mV<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//mV&lt;0表示溢出，进制太大了</span>            R <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            L <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> t <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">swap</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记住n为已知的进制数</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token function">calRadix</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1009 Product of Polynomials</title>
      <link href="/2019/12/05/pat-jia-ji-a1009-product-of-polynomials/"/>
      <url>/2019/12/05/pat-jia-ji-a1009-product-of-polynomials/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>This time, you are supposed to find A×B where A and B are two polynomials.</p><a id="more"></a><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p><p>K N​1​​ a​N​1​​​​ N​2​​ a​N​2​​​​ … N​K​​ a​N​K​​​​</p><p>where K is the number of nonzero terms in the polynomial, N​i​​ and a​N​i​​​​ (,) are the exponents and coefficients, respectively. It is given that 1≤K≤10,<br>0≤ N​K​​ &lt;⋯&lt;N​2​​ &lt;N​1​​ ≤1000</p><p><strong>Output Specification:</strong></p><p>For each test case you should output the product of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate up to 1 decimal place.</p><p><strong>Sample Input:</strong></p><pre><code>2 1 2.4 0 3.22 2 1.5 1 0.5</code></pre><p><strong>Sample Output:</strong></p><pre><code>3 3 3.6 2 6.0 1 1.6</code></pre><p><strong>Solution:</strong></p><p>题意：</p><p>两个多项式相乘</p><p>题解：</p><p>很简单，同样是使用map映射，然后直接每项相乘就行</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span> a<span class="token punctuation">;</span>    <span class="token keyword">double</span> b<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>m<span class="token punctuation">,</span> res<span class="token punctuation">;</span>    cin <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        m<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cin <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ptr <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ptr<span class="token punctuation">)</span>            res<span class="token punctuation">[</span>a <span class="token operator">+</span> ptr<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> b <span class="token operator">*</span> ptr<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ptr <span class="token operator">!=</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ptr<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d %.1f"</span><span class="token punctuation">,</span> ptr<span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">,</span> ptr<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 相乘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1008 Elevator</title>
      <link href="/2019/12/05/pat-jia-ji-a1008-elevator/"/>
      <url>/2019/12/05/pat-jia-ji-a1008-elevator/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.</p><a id="more"></a><p>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.</p><p><strong>Output Specification:</strong></p><p>For each test case, print the total time on a single line.</p><p><strong>Sample Input:</strong></p><pre><code>3 2 3 1</code></pre><p><strong>Sample Output:</strong></p><pre><code>41</code></pre><p><strong>Solution:</strong></p><p>直接按照电梯上下来计算时间即可</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span>sum <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> N<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上一次停留在哪？现在要去的楼层，时间初始为要在 每一层的总停留时间</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> now<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-</span> pre<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//上</span>            sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> pre<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-</span> pre<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//下</span>            sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>pre <span class="token operator">-</span> now<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> now<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新楼层</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1007 Maximum Subesequence Sum</title>
      <link href="/2019/12/05/pat-jia-ji-a1007-maximum-subesequence-sum/"/>
      <url>/2019/12/05/pat-jia-ji-a1007-maximum-subesequence-sum/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a sequence of K integers { N​1​​, N​2​​, …, N​K​​ }. A continuous subsequence is defined to be { N​i​​, N​i+1​​, …, N​j​​ } where 1. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.</p><a id="more"></a><p>Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.</p><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (≤). The second line contains K numbers, separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.</p><p><strong>Sample Input:</strong></p><pre><code>10-10 1 2 3 4 -5 -23 3 7 -21</code></pre><p><strong>Sample Output:</strong></p><pre><code>10 1 4</code></pre><p><strong>Solution</strong></p><p>题意：</p><p>求解和为最大的子序列</p><p>题解：</p><p>使用滑动窗口思想和双指针思想，首先固定住左指针，滑动右指针，计算之间的累加和，并不断的更新最大累加和，并记录左右指针位置<br>但遇到和为负数，则将左指针移到右指针位置，并继续滑动右指针</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> K<span class="token punctuation">;</span>cin <span class="token operator">>></span> K<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">v</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> K <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所求的左、右边界，累加和，以及临时的累加和、左边界</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> K<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    temp <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果和小于0，则直接抛弃</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选下一个点为新左点</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">></span> sum<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获得更大值</span>    <span class="token punctuation">{</span>        sum <span class="token operator">=</span> temp<span class="token punctuation">;</span>        l <span class="token operator">=</span> index<span class="token punctuation">;</span>        r <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1006 Sign In and Sign Out</title>
      <link href="/2019/12/05/pat-jia-ji-a1006-sign-in-and-sign-out/"/>
      <url>/2019/12/05/pat-jia-ji-a1006-sign-in-and-sign-out/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p><a id="more"></a><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:<br>ID_number Sign_in_time Sign_out_time</p><p>where times are given in the format HH:MM:SS, and ID_number is a string with no more than 15 characters.</p><p><strong>Output Specification:</strong></p><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p><p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p><p><strong>Sample Input:</strong></p><pre><code>3CS301111 15:30:28 17:00:10SC3021234 08:00:00 11:25:25CS301133 21:45:00 21:58:40</code></pre><p><strong>Sample Output:</strong></p><pre><code>SC3021234 CS301133</code></pre><p><strong>Solution:</strong></p><p>题意：根据公司的打卡器，求出谁最早来，谁最晚来<br>直接通过输入即可判断得到最早与最晚</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//很简单，就是找到来的最早的人和回去最晚的人即可</span><span class="token keyword">int</span> <span class="token function">getTime</span><span class="token punctuation">(</span>string Time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//由于时间时标准输入，所以很好计算</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Time<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>Time<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Time<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span>         <span class="token punctuation">(</span>Time<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Time<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> M<span class="token punctuation">;</span>    cin <span class="token operator">>></span> M<span class="token punctuation">;</span>    string firstMan<span class="token punctuation">,</span> lastMan<span class="token punctuation">;</span>    <span class="token keyword">int</span> firstTime<span class="token punctuation">,</span> lastTime<span class="token punctuation">;</span>    firstTime <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//24小时多一秒，属于第二天了</span>    lastTime <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属于前一天</span>    string No<span class="token punctuation">,</span> InTime<span class="token punctuation">,</span> OutTime<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> No <span class="token operator">>></span> InTime <span class="token operator">>></span> OutTime<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstTime <span class="token operator">></span> <span class="token function">getTime</span><span class="token punctuation">(</span>InTime<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            firstTime <span class="token operator">=</span> <span class="token function">getTime</span><span class="token punctuation">(</span>InTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            firstMan <span class="token operator">=</span> No<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTime <span class="token operator">&lt;</span> <span class="token function">getTime</span><span class="token punctuation">(</span>OutTime<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lastTime <span class="token operator">=</span> <span class="token function">getTime</span><span class="token punctuation">(</span>OutTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            lastMan <span class="token operator">=</span> No<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> firstMan <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> lastMan <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1005 Spell It Right</title>
      <link href="/2019/12/05/pat-jia-ji-a1005-spell-it-right/"/>
      <url>/2019/12/05/pat-jia-ji-a1005-spell-it-right/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.</p><a id="more"></a><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case occupies one line which contains an N (&lt;= 10^100).</p><p><strong>Output Specification:</strong></p><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p><p><strong>Sample Input:</strong></p><pre><code>12345</code></pre><p><strong>Sample Output:</strong></p><pre><code>one five</code></pre><p><strong>Solution:</strong></p><p>很简单，就是将给出数的每一位相加，得到和，然后读出这个数即可<br>记得给出的数使用string，不然就超出了范围</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span>words <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"zero"</span><span class="token punctuation">,</span><span class="token string">"one"</span><span class="token punctuation">,</span><span class="token string">"two"</span><span class="token punctuation">,</span><span class="token string">"three"</span><span class="token punctuation">,</span><span class="token string">"four"</span><span class="token punctuation">,</span><span class="token string">"five"</span><span class="token punctuation">,</span><span class="token string">"six"</span><span class="token punctuation">,</span><span class="token string">"seven"</span><span class="token punctuation">,</span><span class="token string">"eight"</span><span class="token punctuation">,</span><span class="token string">"nine"</span><span class="token punctuation">,</span><span class="token string">"ten"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    string num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能用数字类型存储，会导致溢出的</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> a <span class="token operator">:</span> num<span class="token punctuation">)</span>        sum <span class="token operator">+</span><span class="token operator">=</span> a <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    num <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> words<span class="token punctuation">[</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> words<span class="token punctuation">[</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数的运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1004 Countion Leaves</title>
      <link href="/2019/12/05/pat-jia-ji-a1004-countion-leaves/"/>
      <url>/2019/12/05/pat-jia-ji-a1004-countion-leaves/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.</p><a id="more"></a><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case starts with a line containing 0, the number of nodes in a tree, and M (&lt;), the number of non-leaf nodes. Then M lines follow, each in the format:<br>ID K ID[1] ID[2] … ID[K]</p><p>where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID’s of its children. For the sake of simplicity, let us fix the root ID to be 01.</p><p>The input ends with N being 0. That case must NOT be processed.</p><p><strong>Output Specification:</strong></p><p>For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.</p><p>The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output 0 1 in a line.</p><p><strong>Sample Input:</strong></p><pre><code>2 101 1 02</code></pre><p><strong>Sample Output:</strong></p><pre><code>0 1</code></pre><p><strong>Solution:</strong><br>题目意思是：家族成员如同一棵树一样，让你输出每一层【每一代】的叶子节点个数【空节点个数】<br>先使用数组存储信息，然后记录每一层的空节点即可<br>可使用DFS和BFS<br><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> maxL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>nodes<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token function">level</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span>    maxL <span class="token operator">=</span> maxL <span class="token operator">></span> L <span class="token operator">?</span> maxL <span class="token operator">:</span> L<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">++</span>level<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> a <span class="token operator">:</span> nodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> L <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> k<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> b<span class="token punctuation">;</span>            nodes<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxL<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> level<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树的DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1002 A+B for Polynomials</title>
      <link href="/2019/12/05/pat-jia-ji-a1002-a-b-for-polynomials/"/>
      <url>/2019/12/05/pat-jia-ji-a1002-a-b-for-polynomials/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Each input file contains one test case. </p><a id="more"></a><p><strong>Input Specification:</strong></p><p>Each case occupies 2 lines, and each line contains the information of a polynomial:</p><p>K N​1​​ a​N​1​​​​ N​2​​ a​N​2​​​​ … N​K​​ a​N​K​​​​</p><p>where K is the number of nonzero terms in the polynomial, N​i​​ and a​N​i​​​​ (i=1,2,…,) are the exponents and coefficients, respectively. It is given that<br>1&lt;=K&lt;=10, 0&lt;=Nk&lt;…&lt;N2&lt;N1&lt;=1000.</p><p><strong>Output Specification:</strong></p><p>For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p><p><strong>Sample Input:</strong></p><pre><code>2 1 2.4 0 3.22 2 1.5 1 0.5</code></pre><p><strong>Sample Output:</strong></p><pre><code>3 2 1.5 1 2.9 0 3.2</code></pre><p><strong>Solution:</strong><br>这道题意思是，两个带指数形式的多项式相加，求其和的多项式<br>很简单，我们使用map映射每个指数的系数相加和即可<br>但需注意输出格式，指数为0也要输出，系数为则不用</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token comment" spellcheck="true">//#include &lt;vector></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">>></span>data<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从大到小排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输入两组数据</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span>        cin <span class="token operator">>></span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//接受每组数据</span>        <span class="token punctuation">{</span>            <span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>            cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>            data<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//系数为0则删除</span>                data<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ptr <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ptr <span class="token operator">!=</span> data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ptr<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> ptr<span class="token operator">-</span><span class="token operator">></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f"</span><span class="token punctuation">,</span> ptr<span class="token operator">-</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级——A1001 A+BFormat</title>
      <link href="/2019/12/05/pat-jia-ji-a1001-a-bformat/"/>
      <url>/2019/12/05/pat-jia-ji-a1001-a-bformat/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Calculate a+b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p><a id="more"></a><p><strong>Input Specification:</strong></p><p>Each input file contains one test case. Each case contains a pair of integers a and b where −. The numbers are separated by a space.</p><p><strong>Output Specification:</strong></p><p>For each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.</p><p><strong>Sample Input:</strong></p><pre><code>-1000000 9</code></pre><p><strong>Sample Output:</strong></p><pre><code>-999,991</code></pre><p><strong>Solution:</strong></p><p>转换为字符串string即可</p><p><strong>Code</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    string s <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> len <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">","</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PAT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数替代加减乘除</title>
      <link href="/2019/12/04/gou-zao-han-shu-ti-dai-jia-jian-cheng-chu/"/>
      <url>/2019/12/04/gou-zao-han-shu-ti-dai-jia-jian-cheng-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="如何通过使用构造函数来替代加减乘除"><a href="#如何通过使用构造函数来替代加减乘除" class="headerlink" title="如何通过使用构造函数来替代加减乘除"></a>如何通过使用构造函数来替代加减乘除</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><a id="more"></a><h3 id="1、利用类的构造函数"><a href="#1、利用类的构造函数" class="headerlink" title="1、利用类的构造函数"></a>1、利用类的构造函数</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Temp</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">++</span>N<span class="token punctuation">;</span> sum <span class="token operator">+</span><span class="token operator">=</span> N<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//有类外初始化，这句代码应该可以不用</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">getRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一定得是静态，否则每次创建是会重新赋值</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Temp<span class="token operator">::</span>N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//类外初始化</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> Temp<span class="token operator">::</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">Sum_Solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Temp<span class="token operator">::</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Temp <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token keyword">new</span> Temp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//也可以直接在main函数中</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span>t<span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Temp<span class="token operator">::</span><span class="token function">getRes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、利用类的析构"><a href="#2、利用类的析构" class="headerlink" title="2、利用类的析构"></a>2、利用类的析构</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span>A <span class="token operator">*</span>Array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span><span class="token keyword">public</span> A <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Array<span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">!</span>n<span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a<span class="token punctuation">;</span>    B b<span class="token punctuation">;</span>    Array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>    Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>    <span class="token keyword">return</span> Array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、利用函数指针"><a href="#3、利用函数指针" class="headerlink" title="3、利用函数指针"></a>3、利用函数指针</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>fun<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">Solution3_Teminator</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">Sum_Solution3</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> fun f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> Solution3_Teminator<span class="token punctuation">,</span> Sum_Solution3 <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n <span class="token operator">+</span> f<span class="token punctuation">[</span><span class="token operator">!</span><span class="token operator">!</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 利用模板</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> n<span class="token operator">></span> <span class="token keyword">struct</span> Sum_Solution4<span class="token punctuation">{</span>    <span class="token keyword">enum</span> Value <span class="token punctuation">{</span> N <span class="token operator">=</span> Sum_Solution4<span class="token operator">&lt;</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token operator">></span><span class="token operator">::</span>N <span class="token operator">+</span> n <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token keyword">struct</span> Sum_Solution4<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">enum</span> Value <span class="token punctuation">{</span> N <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token keyword">struct</span> Sum_Solution4<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">enum</span> Value <span class="token punctuation">{</span> N <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法和数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法中常用的数学</title>
      <link href="/2019/12/04/suan-fa-zhong-chang-yong-de-shu-xue/"/>
      <url>/2019/12/04/suan-fa-zhong-chang-yong-de-shu-xue/</url>
      
        <content type="html"><![CDATA[<h3 id="1、求最大公约数"><a href="#1、求最大公约数" class="headerlink" title="1、求最大公约数"></a>1、求最大公约数</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a,b不分大小</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h3 id="2、最小公倍数"><a href="#2、最小公倍数" class="headerlink" title="2、最小公倍数"></a>2、最小公倍数</h3><pre class="line-numbers language-cpp"><code class="language-cpp">a <span class="token operator">/</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//a,b不分大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、判断素数【质数】："><a href="#3、判断素数【质数】：" class="headerlink" title="3、判断素数【质数】："></a>3、判断素数【质数】：</h3><ul><li>常用的判断法则<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">static</span> boolean <span class="token function">isPrime3</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1,2是素数</span>      <span class="token keyword">return</span> N<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//记得缩小范围</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>最优：【围绕6展开】 <pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">static</span> boolean <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> num <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 不在6的倍数两侧的一定不是质数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">%</span> <span class="token number">6</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> sqrt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> sqrt<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> num <span class="token operator">%</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4、建立素数表"><a href="#4、建立素数表" class="headerlink" title="4、建立素数表"></a>4、建立素数表</h3><p>使用埃氏筛选法，它的时间复杂度为O(nloglogn)。<br>“筛法”是众多筛法中最简单且容易理解的一种，即Eratosthenes筛法。更优的欧拉筛法可以达到O(n)的时间复杂度。<br>素数筛法的关键就在一个“筛”字。<br>算法从小到大枚举所有数，对每一个素数，==筛去它的所有倍数==，剩下的就都是素数了。<br>可能有读者问，一开始并不知道哪些数是素数，何来的“对每一个素数”呢？下面来看一个例子：求1~15中的所有素数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">101</span><span class="token punctuation">;</span><span class="token keyword">int</span> prime<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span>，plum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>boolp<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">FindPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>maxn<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2是素数，从2开始筛选</span>        <span class="token punctuation">{</span>            prime<span class="token punctuation">[</span>pNum<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录素数</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span> maxn<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//筛去素数的倍数</span>                p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">FindPrime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>inti<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span>pNum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span>，prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、求解整数的质因子分解"><a href="#5、求解整数的质因子分解" class="headerlink" title="5、求解整数的质因子分解"></a>5、求解整数的质因子分解</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> sqr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n的根号</span><span class="token comment" spellcheck="true">//枚举根号n以内的质因子</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> pNum <span class="token comment" spellcheck="true">/*素数表的大小*/</span>  <span class="token operator">&amp;&amp;</span> prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> sqr<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果prime[i]是n的因子</span>        fac<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录该因子</span>        fac<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//计算出质因子prime[i]的个数</span>            fac<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>            n<span class="token operator">/</span><span class="token operator">=</span>prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不同质因子个数加1</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//及时退出循环，节省点时间</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果无法被根号n以内的质因子除尽 比如 n=2*191919191991,后面是个大的素数，我们没必要建立那么大的素数表</span><span class="token punctuation">{</span>    fac<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span>n<span class="token punctuation">;</span>    fac<span class="token punctuation">[</span>num<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、计算n-中有多少个质因子P"><a href="#6、计算n-中有多少个质因子P" class="headerlink" title="6、计算n!中有多少个质因子P"></a>6、计算n!中有多少个质因子P</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//计算n！中有多少个质因子p </span><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n，<span class="token keyword">int</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> n<span class="token operator">/</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//累加n/pk </span>        n<span class="token operator">/</span><span class="token operator">=</span>p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于分母多乘一个p </span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、计算组合数："><a href="#7、计算组合数：" class="headerlink" title="7、计算组合数："></a>7、计算组合数：</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//使用简单的暴力法，会导致数据溢出;</span><span class="token comment" spellcheck="true">//使用递归法：</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> m<span class="token operator">==</span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span>m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//传统的递归会导致大量的重复计算！</span><span class="token comment" spellcheck="true">//改进：</span><span class="token keyword">const</span> <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">calC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化边界</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>intj<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>res<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递推计算C(i，j)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//C(i，i-j)=C(i，j)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//先乘再除：</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n，<span class="token keyword">long</span> <span class="token keyword">long</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        ans<span class="token operator">=</span>ans<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>m<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">/</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意一定要先乘再除</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、浮点数进行比较大小："><a href="#8、浮点数进行比较大小：" class="headerlink" title="8、浮点数进行比较大小："></a>8、浮点数进行比较大小：</h3><p>由于浮点数的精度问题，我们不能简单的使用==进行比较<br>应该使用精度来比较</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">define</span> eps = 1e-8</span><span class="token comment" spellcheck="true">//相等：</span>    <span class="token macro property">#<span class="token directive keyword">define</span> Equ(a,b)    ((abs((a)-(b)))&lt;(eps))</span><span class="token comment" spellcheck="true">//此处的括号一定不能省！！！这样可以保证式子也成立</span><span class="token comment" spellcheck="true">//大于：</span>    <span class="token macro property">#<span class="token directive keyword">define</span> More(a,b)    (((a)-(b))>(eps))</span><span class="token comment" spellcheck="true">//此处的括号一定不能省！！！这样可以保证式子也成立</span><span class="token comment" spellcheck="true">//小于：</span>    <span class="token macro property">#<span class="token directive keyword">define</span> Less(a,b)    (((a)-(b))&lt;(-eps))</span><span class="token comment" spellcheck="true">//此处的括号一定不能省！！！这样可以保证式子也成立</span><span class="token comment" spellcheck="true">//大于等于：</span>    <span class="token macro property">#<span class="token directive keyword">define</span> MoreEqu(a,b)    (((a)-(b))>(-eps))</span><span class="token comment" spellcheck="true">//此处的括号一定不能省！！！这样可以保证式子也成立</span><span class="token comment" spellcheck="true">//小于等于：</span>    <span class="token macro property">#<span class="token directive keyword">define</span> LessEqu(a,b)    (((a)-(b))&lt;(eps))</span><span class="token comment" spellcheck="true">//此处的括号一定不能省！！！这样可以保证式子也成立</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
