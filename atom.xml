<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>自由の翼</title>
  <icon>https://www.gravatar.com/avatar/4b22ce9ec4999fcb091d9b70473733a4</icon>
  <subtitle>书的海洋遨游，知识的世界飞翔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zzw1024.top/"/>
  <updated>2020-03-22T07:08:30.000Z</updated>
  <id>http://www.zzw1024.top/</id>
  
  <author>
    <name>自由の翼</name>
    <email>819342493@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指offer——03 数组中重复数字</title>
    <link href="http://www.zzw1024.top/2020/12/02/jian-zhi-offer-016-shu-zhi-de-zheng-shu-ci-fang/"/>
    <id>http://www.zzw1024.top/2020/12/02/jian-zhi-offer-016-shu-zhi-de-zheng-shu-ci-fang/</id>
    <published>2020-12-02T15:26:35.842Z</published>
    <updated>2020-03-22T07:08:30.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p><strong>Describe：</strong><br>实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。</p><p><strong>示例 1:</strong></p><pre><code>输入: 2.00000, 10输出: 1024.00000</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: 2.10000, 3输出: 9.26100</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: 2.00000, -2输出: 0.25000解释: 2-2 = 1/22 = 1/4 = 0.25说明:-100.0 &lt; x &lt; 100.0n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。</code></pre><p><strong>Solution:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> b <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转正会溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>res <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是奇数</span>            x <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>            b <span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;
&lt;p&gt;&lt;strong&gt;Describe：&lt;/strong&gt;&lt;br&gt;实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://www.zzw1024.top/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="数组处理" scheme="http://www.zzw1024.top/tags/%E6%95%B0%E7%BB%84%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>个人观点——谈史上最大IPO</title>
    <link href="http://www.zzw1024.top/2020/12/02/ge-ren-guan-dian-tan-shi-shang-zui-da-ipo/"/>
    <id>http://www.zzw1024.top/2020/12/02/ge-ren-guan-dian-tan-shi-shang-zui-da-ipo/</id>
    <published>2020-12-02T15:26:35.612Z</published>
    <updated>2020-11-20T06:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><blockquote><p>声明：一下内容纯属个人看法与观点，不带任何抨击和侮辱之意，若存在侵犯个人荣誉等内容，望联系，立删！</p></blockquote><a id="more"></a><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1437186694,2617687927&fm=26&gp=0.jpg" alt=""></p><h2 id="蚂蚁金服的诞生之路"><a href="#蚂蚁金服的诞生之路" class="headerlink" title="蚂蚁金服的诞生之路"></a>蚂蚁金服的诞生之路</h2><p>马云开始做支付宝，但由于没有互联网金融的先例，所以支付宝处处碰壁，运营受到各种限制。马云及其合伙人顶着法律灰色地带，硬着头皮接开干。</p><p>04年12月，支付宝从淘宝脱离出来，独立运营，由于当时第三方支付第一次出现，还未进入监管制度，处于我国金融体系的灰色地带。</p><p>2010年6月，央行发布第三方支付的管理办法等相关条例，第三方支付从阴影中走出。<br>但是条例只针对国内企业开放，明确说明国外企业想实现第三方支付还需要得到监管部门的额外考核和允许。</p><p>然而支付宝所在的阿里巴巴集团是由马云及其合伙人，雅虎，软银三个组织投资成立的，明摆着是一个外资企业，不在央行的承认运营的范围内。</p><p>为了成为一家名副其实的国内资产企业，马云未经过其他两大股东的允许下，将支付宝核心资产以低价转移到自己的名下，将支付宝从外资企业成功转为内资企业，即其第三方支付角色合法化。</p><p align="right"> ——来自同花顺博文 </p><h2 id="史上最大的IPO诞生"><a href="#史上最大的IPO诞生" class="headerlink" title="史上最大的IPO诞生"></a>史上最大的IPO诞生</h2><p>2020年9月，蚂蚁金服传闻即将上市，在科创板和港股同步上市，同时，得到了蚂蚁集团的官方承认。</p><p>随后，网络传出，蚂蚁金服的总估值为2.5-3.2万亿，成为史上最大的IPO，也是美国之外上市的最大IPO。</p><p>之后，10月下旬，有消息传输，蚂蚁金服IPO快速获得通过，定价为68.8，代码688688。【一切的数字都是那么好，6、8，代表的顺和发】。发形总市值2.1万亿，也就是说，让利给散户大概20%的利润，不至于一上市就是顶峰，然后一地韭菜成为接盘侠。。。。</p><h2 id="最热的基金"><a href="#最热的基金" class="headerlink" title="最热的基金"></a>最热的基金</h2><p>为了迎接自己的上市，支付宝推出独家销售的五只战略配送基金，每只基金限额120亿，共计600亿。每只基金上市后至少有10%的资金用来购买蚂蚁金服的股票，而且为了让基民们放心抢购，这五只基金都是在大型基金公司旗下，并且每个基金经理都是年收益高达80%的著名基金经理，并要求每个经理必须自己购买100w，把自己的利益和基民利益挂钩。这5只基金封闭期18个月，按道理购买热度不会太大，因为周期太长，但谁让人家是蚂蚁的主呢。至此，身边同学纷纷抢购蚂蚁基金，不久，600亿基金迅速抢购一空。</p><p>随便提一下，由于这次是支付宝的独家销售，搞得其他基金平台网上骂支付宝这是搞垄断，独家获利！！！</p><h2 id="史上最贵的嘴"><a href="#史上最贵的嘴" class="headerlink" title="史上最贵的嘴"></a>史上最贵的嘴</h2><p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3705920329,4221331157&fm=11&gp=0.jpg" alt=""><br>就在10月，在上海召开的外滩经济论坛中，马云发表了20多分钟的惊人演讲。在演讲中，马云抨击了当前我国传统金融行业（四大行咯）的体系制度的落后与保守，风险防范系统的缺失，业务的传统与弊端。马云把银行比做当铺，只给有钱人提供服务，导致不缺钱的人能得到更多的贷款机会，而真正缺钱的人却无法得到银行得到贷款支持，从而导致一个恶性循环。同时抨击最神秘组织银保监会，批评其管理思想太保守，管理制度太严格（这就联想到支付宝为拿到贷款牌照处处碰壁的场景）。因为创新一定会触及到一些法律的边缘，甚至是超出了目前法律的范围，即新生产业处于一个法律灰色地带的地位，但银保监会不应该以当前体制未涉及相关的管理方法，而把新生创业禁止实现，扼杀在创业的摇篮中！【大致是这个意思】<br>（插一个敏感情况，马云发言前，副主席岐山同志发表了致词，强调了我国金融体系与监管体系的完善性，从而突出了马云在唱反调！论坛下面的嘉宾正是马云所抨击的银行大佬与监管大佬们！）</p><h2 id="史上第一大IPO可能破灭"><a href="#史上第一大IPO可能破灭" class="headerlink" title="史上第一大IPO可能破灭"></a>史上第一大IPO可能破灭</h2><p>2020年11月2日，离蚂蚁上市11月5日还有3天，蚂蚁金服实控人包括马云在内的四个合伙人，被央行以及银保监会等四大部门深夜约谈，而内容全网没有，一些精辟分析的贴被强制屏蔽下架。蚂蚁，被蒙上了一层阴影！</p><p>2020年11月3日，白天一切正常，大盘全部飘红，以迎接最大IPO的出生。晚上，突发，蚂蚁被推迟上市（代价最终到来）。开始是沪交所发文，由于蚂蚁被约谈，营收方法不明确，决定其推迟上市！接着，港交所发文推迟蚂蚁上市。两市随后发文说明，已经申购了蚂蚁股票的，将全额退款！至此，全网议论纷纷！！！</p><p>2020年11月4日，蚂蚁金服，全网被抨击，人民日报为首的媒体开始抨击蚂蚁金服的运营制度。网络键盘侠们开始偏向抨击蚂蚁金服存在的意义。</p><ul><li><p>中国体制不允许金融寡头的存在（嗯嗯，的确，谁让蚂蚁金服不是国企呢，谁让他动了四大行的蛋糕呢）。</p></li><li><p>花呗，借呗，利息太高，门槛太低，导致好多无法提供经济消费的学生大量在花呗中借款，应该扼杀。【我查了一下，借呗和花呗超期的日息为万分之四左右，当然也有更低的和更高的，也就是年息14.6%以上，而银行一般的年息为5-6%，细品。。。】</p></li><li><p>央视开始抨击双十一套路！点名天猫和淘宝双十一是在促使群众花明天的钱，剁今天的手。</p></li><li><p>人民日报点名批评花呗！抨击其并不是惠民服务！</p></li><li><p>一些自媒体开始猜测蚂蚁金服两年内上市无望，或者蚂蚁金服将会遭拆解。</p></li></ul><h2 id="第一帝国梦想破灭"><a href="#第一帝国梦想破灭" class="headerlink" title="第一帝国梦想破灭"></a>第一帝国梦想破灭</h2><p>被通知蚂蚁IPO暂停上市后，券商给出了已经申购蚂蚁股票的资金处理办法，将原金额退回给用户，并且还人性的给了几天封闭的银行活期利息，毕竟每笔申购都不小。</p><p>那5只基金呢？网上开始慌了，基民都是奔着蚂蚁去的，没有蚂蚁了，谁愿意封闭18个月买这种基金。但这五只基金所属公司，只是强调基金经理的高收益性，让大家不要慌，但并没有承诺可以撤出金额。</p><p>由于网上太多人申诉要退出资金，相关部分介入后，这5只基金终于给出了解决方案，即11月20日-12月21日，有一个月的时间给基民选择，可以选择直接退出，也可以转入B类基金进行场内交易，还以为继续卧倒，等待18个月的封闭期后获取收益。</p><p>开始我想继续卧倒等待，可由于周围人都在陆陆续续撤出基金，我最终也选择了撤出。</p><p>至此，网上蚂蚁帝国的梦想破灭，也许是马云的逞一时口舌之快，也许是蚂蚁的面目被揭穿，总之，蚂蚁在骂声下，退出出了IPO的热榜中。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- password: --&gt;

&lt;blockquote&gt;
&lt;p&gt;声明：一下内容纯属个人看法与观点，不带任何抨击和侮辱之意，若存在侵犯个人荣誉等内容，望联系，立删！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="个人观点" scheme="http://www.zzw1024.top/categories/%E4%B8%AA%E4%BA%BA%E8%A7%82%E7%82%B9/"/>
    
    
      <category term="马云,蚂蚁金服" scheme="http://www.zzw1024.top/tags/%E9%A9%AC%E4%BA%91-%E8%9A%82%E8%9A%81%E9%87%91%E6%9C%8D/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——236 Lowest Common Ancestor of a Binary Tree</title>
    <link href="http://www.zzw1024.top/2020/12/02/leetcode-236-lowest-common-ancestor-of-a-binary-tree/"/>
    <id>http://www.zzw1024.top/2020/12/02/leetcode-236-lowest-common-ancestor-of-a-binary-tree/</id>
    <published>2020-12-02T15:26:35.115Z</published>
    <updated>2020-03-31T06:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p><strong>Describe：</strong><br>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p><p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”</p><p>Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]</p><p><strong>Example 1:</strong></p><blockquote></blockquote><p>Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1<br>Output: 3<br>Explanation: The LCA of nodes 5 and 1 is 3.</p><p><strong>Example 2:</strong></p><blockquote></blockquote><p>Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4<br>Output: 5<br>Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</p><p><strong>Note:</strong></p><blockquote></blockquote><p>All of the nodes’ values will be unique.<br>p and q are different and both values will exist in the binary tree.</p><p><strong>Solution:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> p<span class="token operator">==</span>root <span class="token operator">||</span> q<span class="token operator">==</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>leftNode <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>rightNode <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode<span class="token operator">&amp;&amp;</span> rightNode<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token keyword">return</span> leftNode <span class="token operator">?</span> leftNode <span class="token operator">:</span> rightNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;
&lt;p&gt;&lt;strong&gt;Describe：&lt;/strong&gt;&lt;br&gt;Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tre
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://www.zzw1024.top/categories/LeetCode/"/>
    
    
      <category term="二叉树" scheme="http://www.zzw1024.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——1114 Pow(x, n)</title>
    <link href="http://www.zzw1024.top/2020/12/02/leetcode-050-pow-x-n/"/>
    <id>http://www.zzw1024.top/2020/12/02/leetcode-050-pow-x-n/</id>
    <published>2020-12-02T15:26:35.035Z</published>
    <updated>2020-03-31T06:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p><strong>Describe：</strong><br>Medium<br>1482<br>2987<br>Add to List<br>Share<br>Implement pow(x, n), which calculates x raised to the power n (xn).</p><p><strong>Example 1:</strong></p><pre><code>Input: 2.00000, 10Output: 1024.00000</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: 2.10000, 3Output: 9.26100</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: 2.00000, -2Output: 0.25000Explanation: 2-2 = 1/22 = 1/4 = 0.25</code></pre><p><strong>Note:</strong><br>-100.0 &lt; x &lt; 100.0<br>n is a 32-bit signed integer, within the range [−231, 231 − 1]</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> b <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转正会溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>res <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是奇数</span>            x <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>            b <span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;p&gt;&lt;strong&gt;Describe：&lt;/strong&gt;&lt;br&gt;Medium&lt;br&gt;1482&lt;br&gt;2987&lt;br&gt;Add to List&lt;br&gt;Share&lt;br&gt;Implement pow(x, n), which calculates
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://www.zzw1024.top/categories/LeetCode/"/>
    
    
      <category term="运算" scheme="http://www.zzw1024.top/tags/%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>好文收藏——郭德纲写给郭麒麟十八岁的一封信</title>
    <link href="http://www.zzw1024.top/2020/12/02/hao-wen-shou-cang-guo-de-gang-xie-gei-guo-qi-lin-shi-ba-sui-de-yi-feng-xin/"/>
    <id>http://www.zzw1024.top/2020/12/02/hao-wen-shou-cang-guo-de-gang-xie-gei-guo-qi-lin-shi-ba-sui-de-yi-feng-xin/</id>
    <published>2020-12-02T15:01:22.000Z</published>
    <updated>2020-12-02T15:01:22.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p><img src="https://cdn.jsdelivr.net/gh/zzwblog/BlogImages/img/v2-d6be6cf287752080e2ca04a6e270ba22_1440w.png" alt=""></p><blockquote><p>前言，无意中看到郭老师写给儿子郭麒麟的成年礼信，内容很好，收藏一波。</p></blockquote><p>甲午年，正月初九。</p><p>我儿子十八了，正所谓成人长大。</p><p>学名奇临，取奇妙降临之意。</p><p>后下海，艺名麒麟，乃仿周大师之遗韵。</p><blockquote><p>人生一世，极不容易。</p></blockquote><blockquote><p>登天难，求人更难。</p></blockquote><blockquote><p>黄连苦，无钱更苦。</p></blockquote><blockquote><p>江湖险，人心更险。</p></blockquote><blockquote><p>春冰薄，人情更薄。</p></blockquote><p>过去有句话：既落江湖内，便是薄命人。</p><p>我本不愿儿从艺，奈何人自有志无法横拦。</p><p>但有几句话要说清楚。</p><p>艺人分几类，相隔种种。一是普通艺人，有一技之长，凭能耐吃饭。一是名演员，知名度高，但不代表艺术高，此类要两说。一是角儿，何为角儿？舞台上的顶梁柱、剧团班社的灵魂。贴出你的名字要保证卖得出票，全团老少指着你吃饭。角儿是有责任的艺人。</p><p>郭麒麟刚十八，我不希望儿子大红。人红麻烦多，一大三大，名气大后，开销大、压力大、是非大。红起来容易，难的是接住自己。年三十吃顿饺子容易，之后呢？得天天吃饺子才行啊，可你有那么多的面和馅儿吗？所以，要多下功夫，并且要保持一个好心态。很多人不成功的原因，主要是太尊重自己了。</p><p>一个人刚出道，不狂是没有出息的。但如果一直狂，是肯定没出息的。你眼中的你，和别人眼中的你，不是一回事。无限赞美自己，只是一种胆怯。我一直认为，恐惧到头就是愤怒。发挥无敌想象，给自己描绘了一个童话世界，白衣如雪来去如风。剑影刀光闪过后，你满脸冷酷地立于珠峰顶端，傲视苍生无比英武。</p><p>此时我要问的是：孩子，你怎么下去？不让古人，是谓有志；不让今人，是谓无良。记住了，小俗便雅，大雅则俗。有人夸你，别信。有人骂你，别听。周围人随意捧骂，不可与之交，因其无至性也。记住，言语多反复，当防欺诈。忘恩思小过，定会反戈。开口说大义，临大难必变节。逢人称兄弟，即深交也平常。</p><p>另外，凡事要慎重。江湖子弟，拿得起来放得下。身边人很重要。一根稻草，扔街上就是垃圾，捆上白菜就是白菜价，捆上大闸蟹就是大闸蟹价。包括脚下的平台，也极重要。同样是一个人，步行一小时能走多远？骑车呢？开车呢？坐飞机呢？平台会决定你的速度，且记且记。</p><p>此外，钱财要珍惜，但不可看得太重。财乃天地至公之物，假手于人罢了，雨打残花风卷流云，轮番更转而已。穷转富，富转穷，哪有百世富家翁？至于交友，吃点亏也无妨。人每所谓穷通寿夭为命所系，岂不知造物之报施，全视人之自取。芸芸众生富贵贫寒，不是谁都可以傲视乾坤。其中有命有运，要知因果懂善恶，我儿且记，但行好事，莫问前程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/zzwblog/BlogImages/img/v2-d6be6cf287752080e2ca04a6e270ba22_1440w.png&quot; alt=&quot;&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="好文收藏" scheme="http://www.zzw1024.top/categories/%E5%A5%BD%E6%96%87%E6%94%B6%E8%97%8F/"/>
    
    
      <category term="郭德纲,德云社" scheme="http://www.zzw1024.top/tags/%E9%83%AD%E5%BE%B7%E7%BA%B2-%E5%BE%B7%E4%BA%91%E7%A4%BE/"/>
    
  </entry>
  
  <entry>
    <title>生活杂记——借米不借柴，借衣不借鞋</title>
    <link href="http://www.zzw1024.top/2020/12/02/sheng-huo-za-ji-jie-mi-bu-jie-chai-jie-yi-bu-jie-xie/"/>
    <id>http://www.zzw1024.top/2020/12/02/sheng-huo-za-ji-jie-mi-bu-jie-chai-jie-yi-bu-jie-xie/</id>
    <published>2020-12-02T13:41:11.000Z</published>
    <updated>2020-12-02T13:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><blockquote><p>转载自上游文摘《<a href="https://mp.weixin.qq.com/s/MMIe5ohryeAWsiB83mGglg" target="_blank" rel="noopener">借米不借柴，借衣不借鞋</a>》</p></blockquote><p><code>贫居闹市无人问，富在深山有远亲。</code></p><blockquote><ul><li>借米不借柴，借衣不借鞋</li></ul></blockquote><p>借米是救济人，是为自己积福，所以一般人都不会拒绝。</p><p>但是柴遍地都是，只要自己肯努力，都能去打柴。</p><p>古人救穷，但是不救懒。</p><p>不借鞋，是因为每个人的尺码都不一样，很难找到合脚的。</p><p>加上鞋子要走路，给人弄脏弄破了也不好还。</p><blockquote><ul><li>不做中人不做保，一生一世无烦恼</li></ul></blockquote><p>不做中间人，不给别人做担保，一生不会有烦恼缠身。</p><p>做中间人，一定是两边都认识，都是朋友。</p><p>不出事还好，出了事情两面不讨好，都会怪罪在你身上。</p><p>到头来事情砸了，朋友也没了。</p><blockquote><ul><li>菜里虫，菜里死</li></ul></blockquote><p>盗墓的一般死在墓穴里，水盗一般死在水里。</p><p>在哪里办坏事一般就会在哪里送命。</p><blockquote><ul><li>柴米夫妻，酒肉朋友，盒儿亲戚</li></ul></blockquote><p>夫妻之间是柴米油盐，朋友之间是吃吃喝喝，亲戚之间离不开礼品点心。</p><p>最亲密的关系，往往更加朴实、真实。</p><blockquote><ul><li>成人不自在，自在不成人</li></ul></blockquote><p>那些想有作为的人，一般都不自在，不能由着自己的性子来。</p><p>天天自在逍遥，一般成不了什么事儿。</p><p>想要成大事，就得忍常人不能忍。</p><blockquote><ul><li>吃葱吃蒜不吃姜</li></ul></blockquote><p>姜和“将”谐音。</p><p>是说不能吃别人的激将法。</p><p>一上头，就容易出祸事。</p><blockquote><ul><li>吃人家的饭，看人家的脸<br>端人家的碗，受人家的管</li></ul></blockquote><p>在生活上依靠别人，那就得服从别人的约束。</p><p>经济大权决定话语权。</p><p>想要不被人管，就得自力更生。</p><p>年轻人不听父母的话，但是在经济上却依赖父母。</p><p>这就不厚道了。</p><blockquote><ul><li>慈不掌兵，义不掌财</li></ul></blockquote><p>仁慈心软的人不能带领军队，义气为先的人不能掌管财权。</p><p>战场生死攸关，关键时刻不能妇人之仁，否则只能满盘皆输，输掉更多人的性命。</p><p>所以将帅必须要狠得下心。</p><p>世上忠义之士多好友，他们重友而轻财，所谓仗义疏财，所以义者不能守财，也守不住。因为他们根本不在乎财。</p><blockquote><ul><li>打人不打脸，骂人不揭短</li></ul></blockquote><p>和别人发生矛盾，不要戳别人痛处。</p><p>一时痛快，遗害无穷，控制情绪，才能和气生财。</p><blockquote><ul><li>大富由命，小富由勤</li></ul></blockquote><p>一个人能不能大富大贵，是上天注定的。</p><p>一个人能否小康，是靠个人努力得来的。</p><p>命里有时终须有，命里无时莫强求。</p><p>踏踏实实，清清白白，做好自己的事就够了。</p><blockquote><ul><li>宁拆十座庙，不毁一门亲</li></ul></blockquote><p>拆散别人的婚姻是很糟糕的事情。</p><p>毁了一家的婚，就毁了三代的幸福。</p><p>父母伤身，夫妻离散，子女被牵连，这其中的过失无法弥补。</p><blockquote><ul><li>贫居闹市无人问，富在深山有远亲</li></ul></blockquote><p>人要是穷了，在闹市也没人上门。</p><p>人要是富了，住在深山里也有人巴结奉承。</p><p>世态炎凉，自古如此。</p><blockquote><ul><li>亲兄弟，明算账</li></ul></blockquote><p>亲人之间，最不能欠的就是经济债。</p><p>亲如兄弟，也要把账摆在明面上。</p><p>只有把账目算明白了，才能有助于缓解家庭经济纠纷、缓解成员关系、促进长期合作。</p><blockquote><ul><li>儿孙自有儿孙福，莫与儿孙做马牛</li></ul></blockquote><p>有很多的家长拼命工作，为孩子攒家底。</p><p>担心孩子不会做饭，没有好工作，没有好对象。</p><p>其实，后代子孙有自己的福气，他们需要对自己的生活负责。</p><p>做长辈的不用给他们当牛做马，过度操劳。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;blockquote&gt;
&lt;p&gt;转载自上游文摘《&lt;a href=&quot;https://mp.weixin.qq.com/s/MMIe5ohryeAWsiB83mGglg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;借米不借柴
      
    
    </summary>
    
    
      <category term="生活杂记" scheme="http://www.zzw1024.top/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="人情" scheme="http://www.zzw1024.top/tags/%E4%BA%BA%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>金融投资——分期与贷款</title>
    <link href="http://www.zzw1024.top/2020/12/02/jin-rong-tou-zi-fen-qi-yu-dai-kuan/"/>
    <id>http://www.zzw1024.top/2020/12/02/jin-rong-tou-zi-fen-qi-yu-dai-kuan/</id>
    <published>2020-12-02T06:41:11.000Z</published>
    <updated>2020-12-02T06:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><blockquote><p>前言，不要把通货膨胀和人民币贬值因素(对100w以内影响甚小)作为你贷款和分期的选择策略，只考虑自己的本金与未来的投资能力！！！</p></blockquote><h2 id="分期利息的背后"><a href="#分期利息的背后" class="headerlink" title="分期利息的背后"></a>分期利息的背后</h2><p>借款60000元，12期分期利息为6%，每月应还本金：60000/12=5000，利息：60000*6%/12=300元。总共还利息3600，利息为年息为6%。</p><p>但是，你并不是借款借了一年，而是逐月递减的！！！</p><p>所以你的平均一年借款借了：32500，年息：11.08%！！！！</p><p>为什么要这样较真，假如你直接贷款60000一年，然后去投资，最次可以收益3%，这样就算年息是12%，你实际还的是9%不到的年息，与11%多的年息完全不一样。</p><p>换句话来讲，应该按实际借款的利息来还，每期所还的利息为:<br>60000<em>6%/12，55000</em>6%/12，。。。5000*6%/12 = 1950。。。</p><p>分期计算公式：<br>24 * 每期手续费a% * 分期n期 / (n+1) ;<br>（和每期手续费a%以及分期总数n，两个因子有关。）</p><p><strong>总结：</strong><br>相同本金和期数下：一次性贷款是实打实的真实利率，分期贷款的利率实际很高。</p><h2 id="信用卡利息背后"><a href="#信用卡利息背后" class="headerlink" title="信用卡利息背后"></a>信用卡利息背后</h2><p>A信用卡，账单日为每月6日，还款日是每月26日。<br>7月3日消费了6000元，则7月4日为该笔消费记账日，7月6日账单日，本期信用卡账单是6000元，最低还款额600元。则：</p><p>若在7月26日前归还账单全额6000元，则视为全额还款，不产生利息；<br>若在7月26日前选择归还最低还款额600元，则8月6日账单上显示他所要承担的利息为：本金6000元在7月4日该笔消费记账日到7月25日该笔消费到帐日的这22天的利息和还款后剩余的5400元（6000元本金-已还600元）在7月26日到8月6日这12天的利息，具体：6000元×0.05%×22天(7月4日-7月25日)+5400元×0.05%×12天(7月26日-8月6日)=66元+32.4元=98.4元。</p><p>信用卡类似于花呗，在还款日全部还了没有手续费，逾期和借呗一样，算日息，套现还有额外手续费，一般和银行贷款利息差不多。</p><h2 id="提前还贷的背后"><a href="#提前还贷的背后" class="headerlink" title="提前还贷的背后"></a>提前还贷的背后</h2><p><strong>总结：</strong><br>提前还贷属于违约形为。</p><ul><li><p>提前部分还贷：<br>1）先还一大笔，然后降低月供，期限仍一样；<br>2）先还一大笔，然后缩短期限，月供一样；</p></li><li><p>提前全部还贷：<br>直接全部还清贷款和利息。</p></li><li><p>特点：<br>1）会上征信，花呗额度会下降；<br>2）严重的属于失信形为，影响下次贷款；<br>3）有些贷款产品整体的手续费仍然要交足，这与提不提前还贷没区别；<br>4）花呗的优势就是会省去后面几期的利息，但额度会下降；<br>5）房贷和车贷一般需要交贷款总额的2-5%罚息；<br>6）提前还贷，后期就可以放手投资了，毫无压力，所以提不提前，综合考虑。长期而讲，房贷越早还越好！！！心理压力决定生理，更决定运气！！！！</p></li><li><p>总结：<br>衡量节省的利息和罚息后，再决定要不要提前还。</p></li></ul><h2 id="最低还款："><a href="#最低还款：" class="headerlink" title="最低还款："></a>最低还款：</h2><p>最低还款不会享受一个月即时还款免息享受。<br>选择了最低还款，那么就会使用的日息，利息很高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;blockquote&gt;
&lt;p&gt;前言，不要把通货膨胀和人民币贬值因素(对100w以内影响甚小)作为你贷款和分期的选择策略，只考虑自己的本金与未来的投资能力！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;分期利息的背后&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="金融投资" scheme="http://www.zzw1024.top/categories/%E9%87%91%E8%9E%8D%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="分期, 贷款" scheme="http://www.zzw1024.top/tags/%E5%88%86%E6%9C%9F-%E8%B4%B7%E6%AC%BE/"/>
    
  </entry>
  
  <entry>
    <title>好文收藏——链接收藏</title>
    <link href="http://www.zzw1024.top/2020/12/01/hao-wen-shou-cang-lian-jie-shou-cang/"/>
    <id>http://www.zzw1024.top/2020/12/01/hao-wen-shou-cang-lian-jie-shou-cang/</id>
    <published>2020-12-01T12:41:11.000Z</published>
    <updated>2020-12-02T12:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><blockquote><p>此文章是专门用来收藏一些网络好文章的，但又不方便转载，故在此收藏一波，便于后期回味。</p></blockquote><p><a href="https://mp.weixin.qq.com/s/8pLt63pK2RrG6bURJwpjIA" target="_blank" rel="noopener">罗永浩，一个理想主义者的沉沦</a></p><p><a href="https://mp.weixin.qq.com/s/-qSauMEibJXbbuH3g3JrZA" target="_blank" rel="noopener">马云再捅娄子，四部门联合约谈蚂蚁集团，支付宝曾经的那些至暗时刻</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;blockquote&gt;
&lt;p&gt;此文章是专门用来收藏一些网络好文章的，但又不方便转载，故在此收藏一波，便于后期回味。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/8pLt
      
    
    </summary>
    
    
      <category term="好文收藏" scheme="http://www.zzw1024.top/categories/%E5%A5%BD%E6%96%87%E6%94%B6%E8%97%8F/"/>
    
    
      <category term="好文,链接" scheme="http://www.zzw1024.top/tags/%E5%A5%BD%E6%96%87-%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——215 Kth Largest Element in an Array</title>
    <link href="http://www.zzw1024.top/2020/07/27/leetcode-215-kth-largest-element-in-an-array/"/>
    <id>http://www.zzw1024.top/2020/07/27/leetcode-215-kth-largest-element-in-an-array/</id>
    <published>2020-07-27T06:41:11.000Z</published>
    <updated>2020-07-27T06:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p><strong>Describe：</strong><br>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p><p><strong>Example 1:</strong></p><blockquote></blockquote><p>Input: [3,2,1,5,6,4] and k = 2<br>Output: 5</p><p><strong>Example 2:</strong></p><blockquote></blockquote><p>Input: [3,2,3,1,2,4,5,5,6] and k = 4<br>Output: 4<br>Note:<br>You may assume k is always valid, 1 ≤ k ≤ array’s length.</p><p><strong>Solution:</strong><br>个人感觉不需要整体排序，通过K个数中的最小值，即第K大数，不停的更新最小值，而k个数中，通过map来进行排序</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span>mapN<span class="token punctuation">;</span>        <span class="token keyword">int</span> minN <span class="token operator">=</span> INT32_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                mapN<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                minN <span class="token operator">=</span> minN <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> minN <span class="token operator">:</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>minN <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                mapN<span class="token punctuation">[</span>minN<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mapN<span class="token punctuation">[</span>minN<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    mapN<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>minN<span class="token punctuation">)</span><span class="token punctuation">;</span>                mapN<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                minN <span class="token operator">=</span> mapN<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>first<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minN<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用大家推荐的快排</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> R <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>R <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> L<span class="token punctuation">,</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> key <span class="token operator">=</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认使用左边的为标位</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>L<span class="token operator">&lt;</span>R <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token operator">></span>key<span class="token punctuation">)</span><span class="token operator">--</span>R<span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把右边最小值与标志位交换</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>L <span class="token operator">&lt;</span> R <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> key<span class="token punctuation">)</span><span class="token operator">++</span>L<span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>R<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把左边大的数挪到右边来</span>        <span class="token punctuation">}</span>        nums<span class="token punctuation">[</span>L<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标志位</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有所谓的堆排序</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">createHeap</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">downAdjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用大根堆</span>    <span class="token keyword">void</span> <span class="token function">downAdjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> R<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> R <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">++</span>j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选出左右节点最大值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//仍是父节点大</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使父节点最大</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">createHeap</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>            <span class="token function">downAdjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;
&lt;p&gt;&lt;strong&gt;Describe：&lt;/strong&gt;&lt;br&gt;Find the kth largest element in an unsorted array. Note that it is the kth largest eleme
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://www.zzw1024.top/categories/LeetCode/"/>
    
    
      <category term="数组" scheme="http://www.zzw1024.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——124 Binary Tree Maximum Path Sum</title>
    <link href="http://www.zzw1024.top/2020/07/11/leetcode-124-binary-tree-maximum-path-sum/"/>
    <id>http://www.zzw1024.top/2020/07/11/leetcode-124-binary-tree-maximum-path-sum/</id>
    <published>2020-07-11T06:41:11.000Z</published>
    <updated>2020-07-11T06:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p><strong>Describe：</strong><br>Given a non-empty binary tree, find the maximum path sum.</p><p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.</p><p><strong>Example 1:</strong></p><blockquote></blockquote><p>Input: [1,2,3]<br>       1<br>      / <br>     2   3<br>Output: 6</p><p><strong>Example 2:</strong></p><blockquote></blockquote><p>Input: [-10,9,20,null,null,15,7]<br>   -10<br>   / <br>  9  20<br>    /  <br>   15   7<br>Output: 42</p><p><strong>Solution:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">int</span> <span class="token function">maxPathSum</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> INT32_MIN<span class="token punctuation">;</span>        <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>res<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> left <span class="token operator">+</span> right <span class="token operator">+</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要么取长链路，要么就去短链路</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//聪明，这里只取左边或者右边，这样就能成为一条路径</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;
&lt;p&gt;&lt;strong&gt;Describe：&lt;/strong&gt;&lt;br&gt;Given a non-empty binary tree, find the maximum path sum.&lt;/p&gt;
&lt;p&gt;For this problem, a pat
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://www.zzw1024.top/categories/LeetCode/"/>
    
    
      <category term="数组" scheme="http://www.zzw1024.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——257 Binary Tree Paths</title>
    <link href="http://www.zzw1024.top/2020/07/11/leetcode-257-binary-tree-paths/"/>
    <id>http://www.zzw1024.top/2020/07/11/leetcode-257-binary-tree-paths/</id>
    <published>2020-07-11T06:41:11.000Z</published>
    <updated>2020-07-11T06:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p><strong>Describe：</strong><br>Given a binary tree, return all root-to-leaf paths.<br>Note: A leaf is a node with no children.</p><p><strong>Example:</strong></p><blockquote></blockquote><p>Input:<br>   1<br> /   <br>2     3<br> <br>  5<br>Output: [“1-&gt;2-&gt;5”, “1-&gt;3”]<br>Explanation: All root-to-leaf paths are: 1-&gt;2-&gt;5, 1-&gt;3</p><p><strong>Solution:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">;</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span>str<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                    s <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"->"</span><span class="token punctuation">;</span>                s <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            str<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;
&lt;p&gt;&lt;strong&gt;Describe：&lt;/strong&gt;&lt;br&gt;Given a binary tree, return all root-to-leaf paths.&lt;br&gt;Note: A leaf is a node with no ch
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://www.zzw1024.top/categories/LeetCode/"/>
    
    
      <category term="二叉树" scheme="http://www.zzw1024.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——235 Lowest Common Ancestor of a Binary Search Tree</title>
    <link href="http://www.zzw1024.top/2020/07/09/leetcode-235-lowest-common-ancestor-of-a-binary-search-tree/"/>
    <id>http://www.zzw1024.top/2020/07/09/leetcode-235-lowest-common-ancestor-of-a-binary-search-tree/</id>
    <published>2020-07-09T06:41:11.000Z</published>
    <updated>2020-07-09T06:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p><strong>Describe：</strong><br>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p><p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”</p><p>Given binary search tree:  root = [6,2,8,0,4,7,9,null,null,3,5]</p><p><strong>Example 1:</strong></p><blockquote></blockquote><p>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8<br>Output: 6<br>Explanation: The LCA of nodes 2 and 8 is 6.</p><p><strong>Example 2:</strong></p><blockquote></blockquote><p>Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4<br>Output: 2<br>Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.</p><p><strong>Constraints:</strong></p><blockquote></blockquote><p>All of the nodes’ values will be unique.<br>p and q are different and both values will exist in the BST.</p><p><strong>Solution:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     TreeNode *left; *     TreeNode *right; *     TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> p<span class="token operator">==</span>root <span class="token operator">||</span> q<span class="token operator">==</span>root<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>leftNode <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>rightNode <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftNode<span class="token operator">&amp;&amp;</span> rightNode<span class="token punctuation">)</span><span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token keyword">return</span> leftNode <span class="token operator">?</span> leftNode <span class="token operator">:</span> rightNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;
&lt;p&gt;&lt;strong&gt;Describe：&lt;/strong&gt;&lt;br&gt;Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nod
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://www.zzw1024.top/categories/LeetCode/"/>
    
    
      <category term="二叉树" scheme="http://www.zzw1024.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode——103 Binary Tree Zigzag Level Order Traversal</title>
    <link href="http://www.zzw1024.top/2020/07/08/leetcode-103-binary-tree-zigzag-level-order-traversal/"/>
    <id>http://www.zzw1024.top/2020/07/08/leetcode-103-binary-tree-zigzag-level-order-traversal/</id>
    <published>2020-07-08T06:41:11.000Z</published>
    <updated>2020-07-08T06:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p><strong>Describe：</strong><br>Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p><p><strong>For example:</strong><br>Given binary tree [3,9,20,null,null,15,7],</p><blockquote></blockquote><p>   3<br>   / <br>  9  20<br>    /  <br>   15   7</p><p>return its zigzag level order traversal as:</p><blockquote></blockquote><p>[<br>  [3],<br>  [20,9],<br>  [15,7]<br>]</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span>res<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>temp<span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span>p<span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> turn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span>father<span class="token punctuation">,</span>child<span class="token punctuation">;</span>            father <span class="token operator">=</span> p<span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>father<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                                TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> father<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>                    child<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>                    child<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                father<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            p <span class="token operator">=</span> child<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>turn<span class="token punctuation">)</span>                <span class="token function">reverse</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            turn <span class="token operator">=</span> <span class="token operator">!</span>turn<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;
&lt;p&gt;&lt;strong&gt;Describe：&lt;/strong&gt;&lt;br&gt;Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, 
      
    
    </summary>
    
    
      <category term="LeetCode" scheme="http://www.zzw1024.top/categories/LeetCode/"/>
    
    
      <category term="二叉树" scheme="http://www.zzw1024.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>网站搭建——git项目推送多个仓库</title>
    <link href="http://www.zzw1024.top/2020/06/10/wang-zhan-da-jian-git-xiang-mu-tui-song-duo-ge-cang-ku/"/>
    <id>http://www.zzw1024.top/2020/06/10/wang-zhan-da-jian-git-xiang-mu-tui-song-duo-ge-cang-ku/</id>
    <published>2020-06-10T05:10:27.000Z</published>
    <updated>2020-06-10T05:10:27.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p>转载:<a href="https://www.cnblogs.com/poloyy/p/12215199.html" target="_blank" rel="noopener">https://www.cnblogs.com/poloyy/p/12215199.html</a></p><h1 id="Gitee拉取Github仓库"><a href="#Gitee拉取Github仓库" class="headerlink" title="Gitee拉取Github仓库"></a>Gitee拉取Github仓库</h1><p>直接在Gitee中创建一个项目，然后再最后一行导入Github项目就阔以啦！<br><img src="https://img2020.cnblogs.com/blog/1463063/202006/1463063-20200610131207560-500399712.png" alt=""></p><p>去到你的Github仓库复制https链接，直接粘贴就阔以啦<br><img src="https://img2020.cnblogs.com/blog/1463063/202006/1463063-20200610131220912-39508480.png" alt=""></p><p>到此为止，在Gitee就已经创建好仓库啦</p><h1 id="本地配置推送方式"><a href="#本地配置推送方式" class="headerlink" title="本地配置推送方式"></a>本地配置推送方式</h1><ul><li>方式一：定义不同的远程仓库名称，然后分别推送 多次推送，配了几个远程仓库就推送几次 </li><li>方式二：在同一个远程仓库下添加另一个远程仓库的地址，然后推送 only一次推送 </li></ul><p>==以下情况均是本地只有单个ssh-key时的操作！！== </p><ol><li>方式一：多次推送</li></ol><ul><li>优点</li></ul><ul><li>想推哪个仓库就推哪个    </li><li>不想推哪个就不推哪个</li></ul><ul><li><p>缺点<br>推送仓库数量多时，时间成本高</p></li><li><p>1）.可以直接通过命令将本地项目和gitee项目关联<br><code>git remote add gitee 码云项目地址</code></p></li><li><p>2).也可以通过修改本地项目的配置文件</p><blockquote><p>a. 首先，进入到项目的 .git 文件夹，打开 config 文件<br>b. 然后，找到 [remote “origin”] ，复制一份remote到下面，修改remote的名字和url即可<br><img src="https://img2020.cnblogs.com/blog/1463063/202006/1463063-20200610131603763-997002322.png" alt=""></p></blockquote></li></ul><p>为了避免冲突，将原始的remote名字也改掉，注意：remote的名字任意，但是在提交的时候要与这里对应<br><img src="https://img2020.cnblogs.com/blog/1463063/202006/1463063-20200610131614188-1802431619.png" alt=""></p><ul><li><p>3).执行以下命令，可以看到配置的两个仓库<br><code>git remote</code></p></li><li><p>4).推送代码时，需要对两个仓库分别执行一次push命令，也就是多次推送</p><pre><code>git push github matser git push gitee master  </code></pre></li></ul><ol start="2"><li>方式二：一次推送</li></ol><ul><li><p>1).通过命令将码云项目地址添加到本地已有的remote下<br><code>git remote set-url --add origin 码云项目地址</code></p></li><li><p>2).也可以通过修改本地项目的配置文件<br><img src="https://img2020.cnblogs.com/blog/1463063/202006/1463063-20200610131732930-127632063.png" alt=""></p></li><li><p>3).推送代码只需执行以下一条命令即可<br><code>git push</code></p></li></ul><h1 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h1><p>博主就是配完之后遇到了该问题，所以拿出来跟大家说说哈<br><code>git push的时有时候会出现错误[rejected] master -&gt; master (fetch first)</code><br><img src="https://img2020.cnblogs.com/blog/1463063/202006/1463063-20200610131745200-133461885.png" alt=""></p><p>此时可以输入： git push -f   进行解决错误，然后再： git push      </p><p>如果上述解决方式不管用也可以输入： git pull –rebase origin master  之后再进行 git push 即可。</p><h1 id="本地有多个ssh-key时"><a href="#本地有多个ssh-key时" class="headerlink" title="本地有多个ssh-key时"></a>本地有多个ssh-key时</h1><p>如果也想配多个ssh-key的话，可以参照这篇文章哦<br><code>https://www.cnblogs.com/poloyy/p/12189140.html</code></p><p>你需要更改两个地方</p><ul><li>第一：公钥配置文件，目录是： C:\Users\user.ssh 下的 config 文件</li></ul><p>现在多了gitee，所以对应的Host也要增加，如下图<br><img src="https://img2020.cnblogs.com/blog/1463063/202006/1463063-20200610131816433-384293327.png" alt=""></p><p>我这里是两个ssh-key都会被Github和Gitee共用，正常来说是一个ssh-key指向一个仓库即可，譬如第一个key的Host配成Github的，第二个Key的Host配成Gitee<br><img src="https://img2020.cnblogs.com/blog/1463063/202006/1463063-20200610131820697-1347076172.png" alt=""></p><ul><li>第二：需要修改在上面配置过的 config 文件，它在你的项目目录下的 .git 文件夹下</li></ul><p>原本只有一个ssh-key时，你的配置文件可能是这样的<br><img src="https://img2020.cnblogs.com/blog/1463063/202006/1463063-20200610131831679-548241428.png" alt=""></p><p>当你有两个ssh-key时，你的配置文件就需要改成如下<br><img src="https://img2020.cnblogs.com/blog/1463063/202006/1463063-20200610131841795-1639237760.png" alt=""></p><p>最后将 Github_HOST 、 Gitee_HOST 替换成你自己配置里的Host地址。其余步骤都是一样的啦！这里就是要强调下，如果有多个ssh-key时，还得修改下配置文件而已~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;p&gt;转载:&lt;a href=&quot;https://www.cnblogs.com/poloyy/p/12215199.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/po
      
    
    </summary>
    
    
      <category term="网站搭建" scheme="http://www.zzw1024.top/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="git, 推送" scheme="http://www.zzw1024.top/tags/git-%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>网站搭建——博客搭建</title>
    <link href="http://www.zzw1024.top/2020/06/09/wang-zhan-da-jian-bo-ke-da-jian/"/>
    <id>http://www.zzw1024.top/2020/06/09/wang-zhan-da-jian-bo-ke-da-jian/</id>
    <published>2020-06-09T14:46:55.000Z</published>
    <updated>2020-06-09T14:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><blockquote><p>转载自博客：<a href="https://juejin.im/entry/5a574864f265da3e3c6c1217" target="_blank" rel="noopener">https://juejin.im/entry/5a574864f265da3e3c6c1217</a><br>侵权告知。</p></blockquote><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>在 Windows 环境下安装 Node.js 非常简单，仅须到<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网下载</a>安装文件并执行即可完成安装。<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c6feba58fd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>去<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git官网</a>根据你的电脑参数，下载对应版本。</p><p>下载完成，通过在命令行输入 git version 查看是否安装成功，有输出版本号说明安装成功。</p><p>鼠标邮件菜单里就多了Git GUI Here和Git Bash Here两个按钮，一个是图形界面的Git操作，一个是命令行，我们选择Git Bash Here。<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c6fea994bd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""><br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c725a598e9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="一、Hexo安装"><a href="#一、Hexo安装" class="headerlink" title="一、Hexo安装"></a>一、Hexo安装</h2><p>桌面右键鼠标，点击Git Bash Here，输入npm命令即可安装</p><pre><code>npm install hexo-cli -gnpm install hexo-deployer-git --save</code></pre><p>第一句是安装hexo，第二句是安装hexo部署到git page的deployer，两个都需要安装。</p><p>如下图即安装完成。<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c728dda55c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h2 id="二、Hexo初始化配置"><a href="#二、Hexo初始化配置" class="headerlink" title="二、Hexo初始化配置"></a>二、Hexo初始化配置</h2><ul><li><p>创建Hexo文件夹<br>安装完成后，根据自己喜好建立目录（如F:\Blog\Hexo），直接进入F:\Blog\Hexo文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。<br><code>$ hexo init</code><br>安装 Hexo 完成后，Hexo 将会在指定文件夹中新建所需要的文件。Hexo文件夹下的目录如下：<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c7293a169d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>本地查看效果<br>执行下面语句，执行完即可登录localhost:4000查看效果</p><pre><code>hexo generatehexo server</code></pre><p>登录localhost:4000，即可看到本地的效果如下：<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c72acc46d2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li></ul><h1 id="将博客部署到Github-Pages上"><a href="#将博客部署到Github-Pages上" class="headerlink" title="将博客部署到Github Pages上"></a>将博客部署到Github Pages上</h1><p>那么现在本地的博客已经搭建起来了，但是我们只可以通过本地连接查看我们的博客。那么我们现在需要做的就是把本地的博客发布到服务器上，让别人也可以连接我们的博客，而Github Pages就帮我完成了这件事情。但是Github Pages的代码就是寄存在Github上面的。那么接下来我们需要在Github上面创建一个新的项目。</p><h2 id="一、注册Github账户"><a href="#一、注册Github账户" class="headerlink" title="一、注册Github账户"></a>一、注册Github账户</h2><p>访问Github首页<br>点击右上角的 Sign Up，注册自己的账户</p><h2 id="二、创建项目代码库"><a href="#二、创建项目代码库" class="headerlink" title="二、创建项目代码库"></a>二、创建项目代码库</h2><p>注册完登陆后，我们就创建一个我们自己的Github Pages项目。点击New repository。<br>创建要点如下：<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c7492a1849?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h2 id="三、配置SSH密钥"><a href="#三、配置SSH密钥" class="headerlink" title="三、配置SSH密钥"></a>三、配置SSH密钥</h2><p>配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下：</p><ol><li>第一步、看看是否存在SSH密钥(keys)<br>首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行:<br><code>$ cd ~/. ssh</code><br>检查你本机用户home目录下是否存在.ssh目录</li></ol><p>如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p><ol start="2"><li>第二步、创建一对新的SSH密钥(keys)<br><code>$ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></li></ol><p>** 这将按照你提供的邮箱地址，创建一对密钥 ** </p><pre><code>Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</code></pre><p>直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如<code>/c/Users/you/.ssh/github_rsa</code></p><p>接着，根据提示，你需要输入密码和确认密码（说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。所谓的最安全的密码，就是没有密码 哈哈）。相关提示如下：</p><pre><code>Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again]</code></pre><p>输入完成之后，屏幕会显示如下信息：</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</code></pre><ol start="3"><li>第三步、在GitHub账户中添加你的公钥<br>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。<br><code>clip &lt; ~/.ssh/id_rsa.pub</code><br>接着：</li></ol><ul><li><p>1). 登陆GitHub,进入你的Account Settings.<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c74ea98dce?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>2). 选择SSH Keys<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c75003310c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>3). 粘贴密钥，添加即可<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c758d3dd78?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li></ul><ol start="4"><li><p>第四步、测试<br>可以输入下面的命令，看看设置是否成功，<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>的部分不要修改：<br><code>$ ssh -T git@github.com</code><br>如果是下面的反馈：</p><pre><code>The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?</code></pre><p>不要紧张，输入yes就好，然后会看到：<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c76b83e076?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>第五步、设置用户信息<br>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。<br>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。</p><pre><code>$ git config --global user.name &quot;ryanlijianchang&quot;//用户名$ git config --global user.email  &quot;liji.anchang@163.com&quot;//填写自己的邮箱</code></pre></li><li><p>第六步、SSH Key配置成功<br>本机已成功连接到github。</p></li></ol><h2 id="四、将本地的Hexo文件更新到Github的库中"><a href="#四、将本地的Hexo文件更新到Github的库中" class="headerlink" title="四、将本地的Hexo文件更新到Github的库中"></a>四、将本地的Hexo文件更新到Github的库中</h2><ul><li><p>第一步、登录Github打开自己的项目 username.github.io<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c76bcbdef9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>第二步、打开之后，点击SSH，选择SSH类型地址<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c77317a936?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>第三步、复制地址<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c77a882a00?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>第四步、打开你一开始创建的Hexo文件夹（如F:\Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c787c11116?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>第五步、在配置文件里作如下修改，保存<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c78dc8dca4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li></ul><h2 id="第六步、在Hexo文件夹下执行："><a href="#第六步、在Hexo文件夹下执行：" class="headerlink" title="第六步、在Hexo文件夹下执行："></a>第六步、在Hexo文件夹下执行：</h2><pre><code>hexo ghexo d</code></pre><p>或者直接执行</p><pre><code>hexo g -d</code></pre><p>执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io(我的是：ryanlijianchang.github.io)。</p><p>假如这时候，报错 ERROR Deployer not found: git，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>这样，你再执行hexo g -d，你的博客就部署到Github上了。</p><h2 id="第七步、在浏览器上输入自己的主页地址"><a href="#第七步、在浏览器上输入自己的主页地址" class="headerlink" title="第七步、在浏览器上输入自己的主页地址"></a>第七步、在浏览器上输入自己的主页地址</h2><p>在浏览器上输入Github Pager为我们生成的外链（例如我的是：ryanlijianchang.github.io/，而你的只需要把你的github用户名替换掉这个链接中的ryanlijianchang，因为我的用户名是这个，那么你自己的专属博客地址就是：https://[您的用户名].github.io/）即可看到自己的博客了。</p><p>当然，每一个人都可以通过这个地址访问到你的博客了。<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c79436ba6a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h1 id="美化自己博客"><a href="#美化自己博客" class="headerlink" title="美化自己博客"></a>美化自己博客</h1><p>那么现在我们的博客已经挂在了Github服务器上面，别人已经可以通过地址来登陆我们的博客了，但是我们这时就有了新的需求，就是自己的博客并不好看，那怎么办的？这很简单，要知道很多前端开发者在Hexo框架下开发了很多的主题给我们使用，我们只需要把他们的主题克隆过来，然后通过修改配置文件即可达到我们所需要的效果。</p><p>那么我们应该怎么修改呢？</p><h2 id="一、进入Hexo的官网主题专栏"><a href="#一、进入Hexo的官网主题专栏" class="headerlink" title="一、进入Hexo的官网主题专栏"></a>一、进入<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo的官网</a>主题专栏</h2><p><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c7943f8189?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h2 id="二、挑选我们喜欢的主题"><a href="#二、挑选我们喜欢的主题" class="headerlink" title="二、挑选我们喜欢的主题"></a>二、挑选我们喜欢的主题</h2><p>可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来(例如我是选择：hexo-theme-next这个主题)<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c7ab832ba0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h2 id="三、克隆主题"><a href="#三、克隆主题" class="headerlink" title="三、克隆主题"></a>三、克隆主题</h2><p>再打开Hexo文件夹下的themes目录（F:\Blog\hexo\themes），右键Git Bash，在命令行输入:</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址) </code></pre><p>下载中，等待下载完成：<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c7b605e272?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h2 id="四、修改Hexo配置文件"><a href="#四、修改Hexo配置文件" class="headerlink" title="四、修改Hexo配置文件"></a>四、修改Hexo配置文件</h2><p>下载完成后，打开Hexo文件夹下的配置文件_config.yml</p><p>修改参数为：<code>theme: hexo-theme-next</code></p><h2 id="五、部署主题，本地查看效果"><a href="#五、部署主题，本地查看效果" class="headerlink" title="五、部署主题，本地查看效果"></a>五、部署主题，本地查看效果</h2><p>返回Hexo目录，右键Git Bash，输入</p><pre><code>hexo ghexo s</code></pre><p>打开浏览器，输入 Http://localhost:4000/ 即可看见我们的主题已经更换了。<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c7b86f3ce1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h2 id="六、如果效果满意，将它部署到Github上"><a href="#六、如果效果满意，将它部署到Github上" class="headerlink" title="六、如果效果满意，将它部署到Github上"></a>六、如果效果满意，将它部署到Github上</h2><p>打开Hexo文件夹，右键Git Bash，输入</p><pre><code>hexo clean   (必须要，不然有时因为缓存问题，服务器更新不了主题)hexo g -d</code></pre><h2 id="七、打开自己的主页，即可看到修改后的效果"><a href="#七、打开自己的主页，即可看到修改后的效果" class="headerlink" title="七、打开自己的主页，即可看到修改后的效果"></a>七、打开自己的主页，即可看到修改后的效果</h2><p>更多修改效果请查看对应主题的说明文档，点击此查看本主题(Next)对应的说明文档。</p><h1 id="在博客写文章"><a href="#在博客写文章" class="headerlink" title="在博客写文章"></a>在博客写文章</h1><h2 id="一、用hexo发表新文章"><a href="#一、用hexo发表新文章" class="headerlink" title="一、用hexo发表新文章"></a>一、用hexo发表新文章</h2><pre><code>$ hexo n &quot;文章标题&quot; </code></pre><p>其中 我的家 为文章标题，执行命令 hexo n “我的家” 后，会在项目 \Hexo\source_posts 中生成 我的家.md文件，用编辑器打开编写即可。</p><p>当然，也可以直接在\Hexo\source_posts中新建一个md文件，我就是这么做的。<br>写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。</p><pre><code>$ hexo g #生成$ hexo d #部署 # 可与hexo g合并为 hexo d -g</code></pre><h2 id="二、用Markdown写文章"><a href="#二、用Markdown写文章" class="headerlink" title="二、用Markdown写文章"></a>二、用Markdown写文章</h2><p>我们注意到在 \Hexo\source_posts 文件夹下存放着我们的文章，它们的格式都是以.md格式结尾的，没错，Hexo也是支持Markdown语法的，所以当我们需要写具有格式化的文章时，我们可以使用支持Markdown语法的编辑器进行文章编译，然后保存文件到 \Hexo\source_posts 文件夹下即可。<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c7bd487097?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>复制进去之后，只要执行</p><pre><code>$ hexo d -g </code></pre><p>推送到我们的Github仓库即可。</p><h3 id="那么什么是Markdown？"><a href="#那么什么是Markdown？" class="headerlink" title="那么什么是Markdown？"></a>那么什么是Markdown？</h3><p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p><h3 id="Markdown有什么优点？"><a href="#Markdown有什么优点？" class="headerlink" title="Markdown有什么优点？"></a>Markdown有什么优点？</h3><ul><li>专注你的文字内容而不是排版样式。</li><li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li><li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li><li>可读，直观。适合所有人的写作语言。</li></ul><h3 id="我该用什么工具？"><a href="#我该用什么工具？" class="headerlink" title="我该用什么工具？"></a>我该用什么工具？</h3><ul><li>Windows下可以使用 MarkdownPad2。</li><li>在 Mac OS X 上，我建议你用 Mou 这款免费且十分好用的 Markdown 编辑器。</li><li>Web 端上，我强烈推荐 简书 这款产品。</li></ul><h3 id="关于Markdown的更多资料可以查看如下："><a href="#关于Markdown的更多资料可以查看如下：" class="headerlink" title="关于Markdown的更多资料可以查看如下："></a>关于Markdown的更多资料可以查看如下：</h3><ul><li><a href="https://sspai.com/post/25137" target="_blank" rel="noopener">认识与入门 Markdown</a></li><li><a href="https://www.douban.com/note/350126154/?type=like" target="_blank" rel="noopener">Markdown入门指南</a></li></ul><h2 id="三、配置博客"><a href="#三、配置博客" class="headerlink" title="三、配置博客"></a>三、配置博客</h2><p>在blog目录下，用sublime打开_config.yml文件，修改参数信息</p><pre><code># Hexo Configuration## Docs: http://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site #站点信息title:  #标题subtitle:  #副标题description:  #站点描述，给搜索引擎看的author:  #作者email:  #电子邮箱language: zh-CN #语言# URL #链接格式url:  #网址root: / #根目录permalink: :year/:month/:day/:title/ #文章的链接格式tag_dir: tags #标签目录archive_dir: archives #存档目录category_dir: categories #分类目录code_dir: downloads/codepermalink_defaults:# Directory #目录source_dir: source #源文件目录public_dir: public #生成的网页文件目录# Writing #写作new_post_name: :title.md #新文章标题default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）titlecase: false #标题转换成大写external_link: true #在新选项卡中打开连接filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsehighlight: #语法高亮enable: true #是否启用line_number: true #显示行号tab_replace:# Category &amp; Tag #分类和标签default_category: uncategorized #默认分类category_map:tag_map:# Archives2: 开启分页1: 禁用分页0: 全部禁用archive: 2category: 2tag: 2# Server #本地服务器port: 4000 #端口号server_ip: localhost #IP 地址logger: falselogger_format: dev# Date / Time format #日期时间格式date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/time_format: H:mm:ss# Pagination #分页per_page: 10 #每页文章数，设置成 0 禁用分页pagination_dir: page# Disqus #Disqus评论，替换为多说disqus_shortname:# Extensions #拓展插件theme: landscape-plus #主题exclude_generator:plugins: #插件，例如生成 RSS 和站点地图的- hexo-generator-feed- hexo-generator-sitemap# Deployment #部署，将 lmintlcx 改成用户名deploy:type: gitrepo: 刚刚github创库地址.gitbranch: master</code></pre><p>特别提醒，在每个参数的：** 后都要加一个空格 **</p><p>修改网站相关信息</p><pre><code>title: 崔斯特测试所用博客subtitle: 副标题description: 网页描述author: 崔斯特language: zh-CNtimezone: Asia/Shanghai</code></pre><p>配置部署（我的是zhihuya，修改成自己的）</p><pre><code>deploy: type: gitrepo: https://github.com/zhihuya/zhihuya.github.io.gitbranch: master</code></pre><h2 id="四、发表文章"><a href="#四、发表文章" class="headerlink" title="四、发表文章"></a>四、发表文章</h2><p>在CMD中输入</p><pre><code>$ hexo new &quot;崔斯特测试文章&quot;INFO  Created: F:\test\blog\source\_posts\崔斯特测试文章.md</code></pre><p>找到该文章，打开，使用Markdown语法，该语法介绍可以查看利用HEXO搭建的博客及Markdown语法介绍</p><pre><code>---title: 崔斯特测试文章date: 2017-02-28 13:03:44tags:---</code></pre><p>这是一篇测试文章，欢迎关注作者博客[1]: <a href="https://zhangslob.github.io/" target="_blank" rel="noopener">https://zhangslob.github.io/</a><br>保存，然后执行下列步骤：</p><pre><code>F:\test\blog$ hexo cleanINFO  Deleted database.INFO  Deleted public folder.</code></pre><pre><code>F:\test\blog$ hexo generateINFO  Start processingINFO  Files loaded in 1.48 s#省略INFO  29 files generated in 4.27 s</code></pre><pre><code>F:\test\blog$ hexo serverINFO  Start processingINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><p>这个时候，打开<a href="http://localhost:4000/，发现刚才的文章已经成功了" target="_blank" rel="noopener">http://localhost:4000/，发现刚才的文章已经成功了</a><br><img src="https://pic2.zhimg.com/80/v2-95377f456e18451b96316edbdeccd985_hd.jpg" alt=""></p><p>最后一步，发布到网上，执行：</p><pre><code>F:\test\blog$ hexo deployINFO  Deploying: gitINFO  Clearing .deploy_git folder...INFO  Copying files from public folder...#省略</code></pre><p>其中会跳出Github登录，直接登录，如果没有问题输入zhihuya（换成你的）.<a href="http://github.io/" target="_blank" rel="noopener">http://github.io/</a><br><img src="https://pic4.zhimg.com/80/v2-9eca7f5fb9a05dbf76ba193a7e408a17_hd.jpg" alt=""></p><p><a href="https://zhihuya.github.io" target="_blank" rel="noopener">崔斯特测试所用博客</a></p><p>然后就可以看到已经发布了<br><img src="https://pic1.zhimg.com/80/v2-4e7b67ea48bde5e2661540624f792010_hd.jpg" alt=""></p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>本篇仅仅针对windows，Mac请移步20分钟教你使用hexo搭建github博客</p><p>发布文章的步骤：</p><ol><li><p>hexo new 创建文章</p></li><li><p>Markdown语法编辑文章</p></li><li><p>部署（所有打开CMD都是在blog目录下）</p><pre><code>hexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo generate #生成hexo server #启动服务预览，非必要，可本地浏览网页hexo deploy #部署发布</code></pre><p>简写Tips：</p><pre><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署</code></pre><p>如果在执行 hexo deploy 后,出现 error deployer not found:github 的错误，执行：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>出错是正常的，出错了自己先百度或google，实在不知道的可以询问我。</p></li></ol><p>托管的话不仅有github可以用，还有个国内的<a href="http://coding.net可选" target="_blank" rel="noopener">http://coding.net可选</a></p><h1 id="将自己的域名关联到Github-Pages上"><a href="#将自己的域名关联到Github-Pages上" class="headerlink" title="将自己的域名关联到Github Pages上"></a>将自己的域名关联到Github Pages上</h1><p>很多朋友创建了自己的博客之后会选择买一个属于自己的域名，然后将自己域名绑定到自己的Github Pages博客上，其实这也并不难，只要你有个域名。</p><h2 id="一、购买域名"><a href="#一、购买域名" class="headerlink" title="一、购买域名"></a>一、购买域名</h2><p>如果你不是很有钱，在阿里云上，你只要几块钱就可以买到一个域名。</p><p>选择你喜欢的域名，然后购买即可。<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c8529b7e80?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>##二、配置CNAME文件<br>在 \hexo\source 文件夹下创建文件 CNAME （新建记事本文件命名CNAME，然后打开）</p><p>内容为你的域名，例如我的域名是：ryane.top<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c855add24e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>在Hexo文件夹提交</p><pre><code>hexo g -d</code></pre><h2 id="三、修改DNS的DNS"><a href="#三、修改DNS的DNS" class="headerlink" title="三、修改DNS的DNS"></a>三、修改DNS的DNS</h2><ol><li><p>如果你是在阿里云购买域名的话，请登录阿里云网站。打开个人中心，点击域名<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c856d6f09b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>选择管理<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c85bffa826?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>修改DNS为</p><pre><code>f1g1ns2.dnspod.net f1g1ns1.dnspod.net </code></pre><p><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c871f901d6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li></ol><h2 id="四、域名解析"><a href="#四、域名解析" class="headerlink" title="四、域名解析"></a>四、域名解析</h2><ol><li><p>打开<a href="https://www.dnspod.cn" target="_blank" rel="noopener">DNSPOD</a>，注册一个账户</p></li><li><p>点击添加域名，把你的域名添加进去，如无意外，添加完之后就是以下这个状态<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c8762afc03?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>此时点击添加记录，添加两个记录，一个主机记录为@， 一个为www，而记录值都是填同一个，填你的博客主页对应的ip，添加完后如下。<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c8788184d4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>但是如何获取ip值呢？打开运行，输入cmd，打开命令窗口输入 ping 主页地址 ， 红色部分即为你的ip值<br><img src="https://user-gold-cdn.xitu.io/2018/1/20/161117c88c7b5bba?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p></li><li><p>将IP输入过去，然后会提示你到域名注册的地方修改DNS。等待生效，最迟72小时生效。即可通过你的域名浏览你的博客主页。</p></li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>当你完成了你的博客之后，相信你的心情跟我刚做完的心情是一样的，即便很累，但是当自己的博客成型之后，自己还是有一个成就感的，那么完成后，以后的路还很长，真正想要自己博客能够积累人气，还得靠好的内容，所以认真写文章吧，相信你会受益于此的。</p><p>如果大家有什么问题的话，可以在我留言板下留言，我看到评论时会第一时间回答大家。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><ul><li><a href="https://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="noopener">Markdown–入门指南</a></li><li><a href="http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/" target="_blank" rel="noopener">如何搭建一个独立博客——简明 Github Pages与 jekyll 教程 by cnfeat</a></li><li><a href="https://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="noopener">Hexo搭建Github静态博客 by 金石开</a></li><li><a href="http://www.xuanfengge.com/using-ssh-key-link-github-photo-tour.html" target="_blank" rel="noopener">使用SSH密钥连接Github【图文教程】 by 轩枫</a></li></ul><blockquote><p>** 声明：**<br>由于本人初次接触这方面的知识，所以本文是转载的，若侵权，望留言，我必删之。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;blockquote&gt;
&lt;p&gt;转载自博客：&lt;a href=&quot;https://juejin.im/entry/5a574864f265da3e3c6c1217&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://
      
    
    </summary>
    
    
      <category term="网站搭建" scheme="http://www.zzw1024.top/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo,blog" scheme="http://www.zzw1024.top/tags/hexo-blog/"/>
    
  </entry>
  
  <entry>
    <title>生活杂记——诗分享：人生</title>
    <link href="http://www.zzw1024.top/2020/06/09/sheng-huo-za-ji-shi-fen-xiang-ren-sheng/"/>
    <id>http://www.zzw1024.top/2020/06/09/sheng-huo-za-ji-shi-fen-xiang-ren-sheng/</id>
    <published>2020-06-09T14:33:17.000Z</published>
    <updated>2020-06-09T14:33:17.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><pre><code>        喜欢一个人</code></pre><p>　　　　　　始于颜值，陷于才华;</p><p>　　　　　　忠于人品，痴于身体;</p><p>　　　　　　迷于声音，醉于深情;</p><p>　　　　最后，却，折于物质，败于现实。</p><p>　　</p><p>　　　　这世间万千滋味，早有先人尝遍；</p><p>　　　　　　读过多少警示名言；</p><p>　　　　我们还是会不由自主的重蹈覆辙；</p><p>　　　　　　走他们走过的路；</p><p>　　　　　　受他们受过的苦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;
&lt;pre&gt;&lt;code&gt;        喜欢一个人&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　　　　　始于颜值，陷于才华;&lt;/p&gt;
&lt;p&gt;　　　　　　忠于人品，痴于身体;&lt;/p&gt;
&lt;p&gt;　　　　　　迷于声音，醉于深情;&lt;/p&gt;
&lt;p&gt;　　　　最后，却，
      
    
    </summary>
    
    
      <category term="生活杂记" scheme="http://www.zzw1024.top/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="人生" scheme="http://www.zzw1024.top/tags/%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>生活杂记——诗分享:活</title>
    <link href="http://www.zzw1024.top/2020/06/09/sheng-huo-za-ji-shi-fen-xiang-huo/"/>
    <id>http://www.zzw1024.top/2020/06/09/sheng-huo-za-ji-shi-fen-xiang-huo/</id>
    <published>2020-06-09T14:29:57.000Z</published>
    <updated>2020-06-09T14:29:57.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p>如果羡慕成功者的富贵，</p><p>别一味模仿他们富贵后的事。</p><p>那些名牌表呀包呀酒呀车呀，</p><p>都是他们富贵后的事。</p><p>硬撑着模仿了，</p><p>也只能图个穷开心而已。</p><p>要模仿，</p><p>就模仿他们富贵前的事。</p><p>他们那些</p><p>鹰般的探索、</p><p>蛇般的专注、</p><p>蚁般的辛劳、</p><p>蛹般的耐心，</p><p>全是些风吹日晒灰头土脸的事！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;p&gt;如果羡慕成功者的富贵，&lt;/p&gt;
&lt;p&gt;别一味模仿他们富贵后的事。&lt;/p&gt;
&lt;p&gt;那些名牌表呀包呀酒呀车呀，&lt;/p&gt;
&lt;p&gt;都是他们富贵后的事。&lt;/p&gt;
&lt;p&gt;硬撑着模仿了，&lt;/p&gt;
&lt;p&gt;也只能图个穷开心而已。&lt;/p&gt;
&lt;p&gt;要模仿，
      
    
    </summary>
    
    
      <category term="生活杂记" scheme="http://www.zzw1024.top/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="诗" scheme="http://www.zzw1024.top/tags/%E8%AF%97/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——关键路径详解</title>
    <link href="http://www.zzw1024.top/2020/06/09/shu-ju-jie-gou-guan-jian-lu-jing-xiang-jie/"/>
    <id>http://www.zzw1024.top/2020/06/09/shu-ju-jie-gou-guan-jian-lu-jing-xiang-jie/</id>
    <published>2020-06-09T14:16:34.000Z</published>
    <updated>2020-06-09T14:16:34.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><h1 id="AOV网："><a href="#AOV网：" class="headerlink" title="AOV网："></a>AOV网：</h1><p>顶点活动（Activity On Vertex，AOV）网是指用顶点表示活动，而用边集表示活动间优先关系的有向图。例如图10-57的先导课程示意图就是AOV网，其中图的顶点表示各项课程，也就是“活动”；有向边表示课程的先导关系，也就是“活动间的优先关系”。显然，图中不应当存在有向环，否则会让优先关系出现逻辑错误。<br><img src="https://img-blog.csdnimg.cn/20191122154223280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYzNzQ5NQ==,size_16,color_FFFFFF,t_70" alt=""><br>​</p><h1 id="AOE网："><a href="#AOE网：" class="headerlink" title="AOE网："></a>AOE网：</h1><p>边活动（Activity On Edge，AOE）网是指用带权的边集表示活动，而用顶点表示事件的有向图，其中边权表示完成活动需要的时间。例如图10-59中，边a1<del>a6表示需要学习的课程，也就是“活动”，边权表示课程学习需要消耗的时间；顶点V1</del>V6。表示到此刻为止前面的课程已经学完，后面的课程可以开始学习，也就是“事件”（如V5表示a4计算方法和a3实变函数已经学完，a6泛函分析可以开始学习。从另一个角度来看，a6只有当a4和a5都完成时才能开始进行，因此当a4计算方法学习完毕后必须等待a5实变函数学习完成后才能进入到a6泛函分析的学习），显然“事件”仅代表一个中介状态。<br><img src="https://img-blog.csdnimg.cn/2019112215324778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYzNzQ5NQ==,size_16,color_FFFFFF,t_70" alt=""><br>​</p><ul><li><p>源点：在AOE网中，没有入边的顶点称为源点；如顶点V1 </p></li><li><p>终点：在AOE网中，没有出边的顶点称为终点；如顶点V6 </p></li></ul><h1 id="AOE网的性质："><a href="#AOE网的性质：" class="headerlink" title="AOE网的性质："></a>AOE网的性质：</h1><ul><li><p>只有在进入某顶点的活动都已经结束，该顶点所代表的事件才发生；</p></li><li><p>只有在某顶点所代表的事件发生后，从该顶点出发的各活动才开始；</p></li></ul><p>AOE网中的<strong>最长路径被称为关键路径</strong>（强调：关键路径就是AOE网的最长路径），而把关键路径上的活动称为关键活动，显然关键活动会影响整个工程的进度。</p><h1 id="关键概念："><a href="#关键概念：" class="headerlink" title="关键概念："></a>关键概念：</h1><p>​<img src="https://img-blog.csdnimg.cn/201911221535246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYzNzQ5NQ==,size_16,color_FFFFFF,t_70" alt=""></p><ol><li>事件的最早发生时间ve[k]（earliest time of vertex）：即顶点vk的最早发生时间。</li></ol><p>从源点向终点方向计算</p><pre><code>ve[0] = 0ve[1] = ve[0] + a0 = 0 + 4 = 4ve[2] = max( ve[0] + a1, ve[1] + a2 ) = max(0 + 3, 4 + 2 = 6ve[3] = max(ve[1] + a4, ve[2] + a3) = max(4 + 6, 3 + 4) = 10</code></pre><ol start="2"><li>事件的最晚发生时间vl[k]（latest time of vertex）：即顶点vk的最晚发生时间，也就是每个顶点对应的事件最晚需要开始的时间，超出此时间将会延误整个工期。</li></ol><p>从终点向源点方向计算</p><pre><code>vl[3] = ve[3] = 10vl[2] = vl[3] - a3 = 10 - 4 = 6vl[1] = min(vl[3] - a4, vl[2] - a2) = min(10-6, 6-2) = 4//之所以求最小，保证其他的点的最晚发生时间vl[0] = min(vl[2] - a1, vl[1] - a0) = min(4-4, 4-2) = 0 </code></pre><ol start="3"><li>活动的最早开工时间e[k]（earliest time of edge）：即弧ax的最早发生时间。</li></ol><p>5条边，5个活动</p><pre><code>e[0] = ve[0] = 0e[1] = ve[0] = 0e[2] = ve[1] = 4e[3] = ve[2] = 6e[4] = ve[1] = 4</code></pre><ol start="4"><li>活动的最晚开工时间l[k]（latest time of edge）：即弧ak的最晚发生时间，也就是不推迟工期的最晚开工时间。<pre><code>e[0] = v[1] - a0 = 4 - 4 = 0</code></pre></li></ol><p>e[1] = vl[2] - a1 = 6 - 3 = 3</p><p>e[2] = vl[2] - a2 = 6 - 2 = 4</p><p>e[3] = vl[3] - a3 = 10 - 4 = 6</p><p>e[4] = vl[3] - a4 = 10 - 6 = 4 </p><pre><code>活动的最早开始时间和最晚开始时间相等，则说明该活动时属于关键路径上的活动，即关键活动# 算法设计：关键路径算法是一种典型的动态规划法，设图G=(V, E)是个AOE网，结点编号为1,2,...,n，其中结点1与n 分别为始点和终点，ak=&lt;i, j&gt;∈E是G的一个活动。算法关键是确定活动的最早发生时间ve[k]和最晚发生时间vl[k]，进而获取顶点的最早开始时间e[k]和最晚开始时间l[k]。根据前面给出的定义，可推出活动的最早及最晚发生时间的计算方法：</code></pre><p>e(k) = ve(i) </p><p>l(k) = vl(j) - len(i,j)</p><pre><code>​![](https://img-blog.csdnimg.cn/20191122153716227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYzNzQ5NQ==,size_16,color_FFFFFF,t_70)结点的最早发生时间的计算，需按拓扑次序递推：</code></pre><p>ve(1) = 0</p><p>ve(j) = MAX{ etv(i)+len(i, j) }</p><pre><code>对所有&lt;i,j&gt; ∈E的i  结点的最晚发生时间的计算，需按逆拓扑次序递推：</code></pre><p>vl(n) = ve(n)</p><p>vl(i) = MIN{vl(j) - len(i, j)} 对所有&lt;i,j&gt;∈E的j</p><pre><code>这种计算方法， 依赖于拓扑排序， 即计算ve( j) 前，应已求得j 的各前趋结点的ve值，而计算vl(i)前，应已求得i的各后继结点的vl值。ve的计算可在拓扑排序过程中进行，即在每输出一个结点i后，在删除i的每个出边&lt;i,j&gt;（即入度减1）的同时，执行</code></pre><p>if ( ve[i]+len(i,j)) &gt; ve[j] )</p><p>ve[j] = ve[i] + len(i,j)</p><pre><code>这时会发现，如果想要获得ve[j]的正确值，ve[il]\~ve[ik]必须已经得到。有什么办法能够在访问某个结点时保证它的前驱结点都已经访问完毕呢？没错，使用拓扑排序就可以办到。当按照拓扑序列计算ve数组时，总是能保证计算ve[i]的时候ve[il]~ve[ik]都已经得到。但是这时又碰到另一个问题，通过前驱结点去寻找所有后继结点很容易，但是通过后继结点V；去寻找它的前驱结点V1~Vx似乎没有那么直观。一个比较好的办法是，在拓扑排序访问到某个结点时，不是让它去找前驱结点来更新ve[i]，而是使用ve[i]去更新其所有后继结点的ve值。通过这个方法，可以让拓扑排序访问到V；的时候，V1\~Vk一定都已经用来更新过ve[i]，此时的ve[i]便是正确值，就可以用它去更新V；的所有后继结点的ve值。</code></pre><p>//拓扑序列</p><p>stack<int>topOrder;</p><p>//拓扑排序，顺便求ve数组</p><p>bool topologicalSort()</p><p>{</p><pre><code>queue&lt;int&gt;q;for(int i=0;i&lt;n;i++)    if(inDegree[i]==0)        q.push(i);while(!q.empty()){    int u=q.front();    q.pop();    topOrder.push(u);//将u加入拓扑序列    for(int i=0;i&lt;G[u].size();i++)    {        int v=G[u][i].v;//u的i号后继结点编号为v        inDegree[v]--;        if(inpegree[v]==0)            q.push(v);        //用ve[u]来更新u的所有后继结点        if(ve[u]+G[u][i].w&gt; ve[v])            ve[v]=ve[u]+G[u][i].w;    }}if(toporder.size()== n)    return true;else    return false;</code></pre><p>}</p><pre><code>同理，如图10-64所示，从事件V出发通过相应的活动ar1~ark可以到达k个事件V1~Vk，活动的边权为length[r1]~length[rk]。假设已经算好了事件V1~Vk的最迟发生时间xl[j1]～vl[jk]，那么事件Vi的最迟发生时间就是vl[j1]-length[r1]~vl[jk]-length[rk]中的最小值。此处取最小值是因为必须保证Vj1~Vjk的最迟发生时间能被满足；可以通过下面这个公式辅助理解。![](https://img-blog.csdnimg.cn/20191122153835953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYzNzQ5NQ==,size_16,color_FFFFFF,t_70)和ve数组类似，如果需要算出vl[i]的正确值，vl[j1]\~vl[jk]必须已经得到。这个要求与ve数组的刚好相反，也就是需要在访问某个结点时保证它的后继结点都已经访问完毕，而这可以通过使用逆拓扑序列来实现。幸运的是，不必再做一次逆拓扑排序来得到逆拓扑序列，而是可以通过颠倒拓扑序列来得到一组合法的逆拓扑序列。此时会发现，在上面实现拓扑排序的过程中使用了栈来存储拓扑序列，那么只需要按顺序出栈就是逆拓扑序列。而当访问逆拓扑序列中的每个事件Vi时，就可以遍历Vi的所有后继结点Vj1\~Vjk，使用vI[j1]\~vl[jk]来求出vl[i]。这部分的代码如下所示：</code></pre><p>fill(vl，v1+n，ve[n-1]);//v1数组初始化，初始值为终点的ve值</p><p>//直接使用toporder出栈即为逆拓扑序列，求解v1数组</p><p>while(！topOrder.empty())</p><p>{</p><pre><code>int u=topOrder.top();//栈顶元素为utopOrder.pop();for(int i=0;i&lt;G[u].size();i++){    int v=G[u][i].v;//u的后继结点v    //用u的所有后继结点v的v1值来更新v1[u]    if(vl[v]-G[u][i].w &lt; vl[u])        vl[u]=vl[v]-G[u][i].w;}</code></pre><p>}</p><pre><code>复制代码1 fill(vl，v1+n，ve[n-1]);//v1数组初始化，初始值为终点的ve值2 3 //直接使用toporder出栈即为逆拓扑序列，求解v1数组4 5 while(！topOrder.empty())6 7 {8 9     int u=topOr通过上面的步骤已经把求解关键活动的过程倒着推导了一遍，下面给出上面过程的步骤总结，即“先求点，再夹边”：* ①按拓扑序和逆拓扑序分别计算各顶点（事件）的最早发生时间和最迟发生时间：![](https://img-blog.csdnimg.cn/20191122153922180.png)​* ②用上面的结果计算各边（活动）的最早开始时间和最迟开始时间：![](https://img-blog.csdnimg.cn/2019112215395853.png)​* ③e[i-→] = l[i-→i]的活动即为关键活动。主体部分代码如下（适用汇点确定且唯一的情况，以n-1号顶点为汇点为例）：【主体代码】求取关键路径：</code></pre><p>//遍历邻接表的所有边，计算活动的最早开始时间e和最迟开始时间1</p><p>for(int u=0；u&lt;n；u++)</p><p>{</p><pre><code>for(int i=0；i&lt;G[u].size()；i++){    int v=G[u][i].v，w=G[u][i].w；    //活动的最早开始时间e和最迟开始时间1    int e=ve[u]，l=vl[v]-w；    //如果e==1，说明活动u-&gt;v是关键活动    if(e==1)    printf(&quot;%d-&gt;%d\n&quot;，u,v)；//输出关键活动}}return ve[n-1]；//返回关键路径长度</code></pre><p>}</p><pre><code>在上述代码中，没有将活动的最早开始时间e和最迟开始时间l存储下来，这是因为一般来说e和l只是用来判断当前活动是否是关键活动，没有必要单独存下来。如果确实想要将它存储下来，只需要在结构体Node中添加域e和1即可。如果事先不知道汇点编号，有没有办法比较快地获得关键路径长度呢？当然是有办法的，那就是取ve数组的最大值。原因在于，ve数组的含义是事件的最早开始时间，因此所有事件中ve最大的一定是最后一个（或多个）事件，也就是汇点。于是只需要在fill函数之前添加一小段语句，然后改变下vl函数初始值即可，代码如下：</code></pre><p>int maxLength = 0;</p><p>for(int i=0; i&lt;n; ++i)</p><p>{</p><pre><code>if(ve[i] &gt; maxLength)    maxLength = ve[i];</code></pre><p>}</p><p>fill(vl, vl + n, maxLength);</p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;h1 id=&quot;AOV网：&quot;&gt;&lt;a href=&quot;#AOV网：&quot; class=&quot;headerlink&quot; title=&quot;AOV网：&quot;&gt;&lt;/a&gt;AOV网：&lt;/h1&gt;&lt;p&gt;顶点活动（Activity On Vertex，AOV）网是指用顶点表示活动
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://www.zzw1024.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="关键路径" scheme="http://www.zzw1024.top/tags/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——最小生成树</title>
    <link href="http://www.zzw1024.top/2020/06/09/shu-ju-jie-gou-zui-xiao-sheng-cheng-shu/"/>
    <id>http://www.zzw1024.top/2020/06/09/shu-ju-jie-gou-zui-xiao-sheng-cheng-shu/</id>
    <published>2020-06-09T14:12:36.000Z</published>
    <updated>2020-06-09T14:12:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><h1 id="最小生成树："><a href="#最小生成树：" class="headerlink" title="最小生成树："></a>最小生成树：</h1><p>最小生成树（Minimum Spanning Tree，MST）是在一个给定的无向图G（V，E）中求一棵树T，使得这棵树拥有图G中的所有顶点，且所有边都是来自图G中的边，并且满足整棵树的边权之和最小。<br><img src="https://img2018.cnblogs.com/i-beta/1463063/201911/1463063-20191122155454937-1989257498.png" alt=""></p><p>图10-43给出了一个图G及其最小生成树T，其中较粗的线即为最小生成树的边。可以看到，边AB、BC、BD包含了图G的所有顶点，且由它们生成的树的边权之和为6，是所有生成树中权值最小的（例如边AD、BD、CD生成的树，其边权之和为7，大于之前给出的树的边权之和）。</p><p>最小生成树有3个性质需要掌握：</p><blockquote><ul><li>①最小生成树是树，因此其边数等于顶点数减1，且树内一定不会有环。</li></ul></blockquote><blockquote><ul><li>②对给定的图G（V，E），其最小生成树可以不唯一，但其边权之和一定是唯一的。</li></ul></blockquote><blockquote><ul><li>③由于最小生成树是在无向图上生成的，因此其根结点可以是这棵树上的任意一个结点。于是，如果题目中涉及最小生成树本身的输出，为了让最小生成树唯一，一般都会直接给出根结点，读者只需以给出的结点作为根结点来求解最小生成树即可。</li></ul></blockquote><p>求解最小生成树一般有两种算法，即prim算法与kruskal算法。</p><p>这两个算法都是采用了贪心法的思想，只是贪心的策略不太一样。</p><h1 id="Prim算法与Kurskal算法比较"><a href="#Prim算法与Kurskal算法比较" class="headerlink" title="Prim算法与Kurskal算法比较"></a>Prim算法与Kurskal算法比较</h1><blockquote><ul><li>（1）从算法的思想可以看出，如果图G中的边数较小时，可以采用Kruskal算法，因为Kruskal 算法每次查找最短的边；边数较多可以用Prim算法，因为它是每次加一个结点。可见，Kruskal算法适用于稀疏图，而Prim算法适用于稠密图。</li></ul></blockquote><blockquote><ul><li>（2）从时间上讲，Prim算法的时间复杂度为O（n2），Kruskal 算法的时间复杂度为O（eloge）。</li></ul></blockquote><blockquote><ul><li>（3）从空间上讲，显然在Prim算法中，只需要很小的空间就可以完成算法，因为每一次都是从V-U集合出发进行扫描的，只扫描与当前结点集到U集合的最小边。但在Kruskal算法中，需要对所有的边进行排序，对于大型图而言，Kruskal算法需要占用比Prim算法大得多的空间。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;h1 id=&quot;最小生成树：&quot;&gt;&lt;a href=&quot;#最小生成树：&quot; class=&quot;headerlink&quot; title=&quot;最小生成树：&quot;&gt;&lt;/a&gt;最小生成树：&lt;/h1&gt;&lt;p&gt;最小生成树（Minimum Spanning Tree，MST）是在
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://www.zzw1024.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="最小生成树" scheme="http://www.zzw1024.top/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——prim算法【最小生成树1】</title>
    <link href="http://www.zzw1024.top/2020/06/09/shu-ju-jie-gou-prim-suan-fa-zui-xiao-sheng-cheng-shu-1/"/>
    <id>http://www.zzw1024.top/2020/06/09/shu-ju-jie-gou-prim-suan-fa-zui-xiao-sheng-cheng-shu-1/</id>
    <published>2020-06-09T14:04:28.000Z</published>
    <updated>2020-06-09T14:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<!-- password: --><p>适用范围：要求无向图</p><p>prim算法（读者可以将其读作“普里姆算法”）用来解决最小生成树问题，</p><p>其基本思想是：</p><ul><li><p>对图G（VE）设置集合S，存放已被访问的顶点，</p></li><li><p>然后每次从集合V-S中选择与集合S的最短距离最小的一个顶点（记为u），访问并加入集合S。</p></li><li><p>令顶点u为中介点，优化所有从u能到达的顶点v与集合S之间的最短距离。</p></li></ul><p>这样的操作执行n次（n为顶点个数），直到集合S已包含所有顶点。可以发现，prim算法的思想与最短路径中Dijkstra算法的思想几乎完全相同，只是在涉及最短距离时使用了集合S代替Dijkstra算法中的起点s。</p><pre><code>int prim(){//默认0号为初始点，函数返回最小生成树的边权之和    fi11(d，d+MAXV，Inf)；//fi11函数将整个d数组赋为INE (慎用memset )    d[0]=0；//只有0号顶点到集合s的距离为0，其余全为Inf    int ans=0；//存放最小生成树的边权之和    for (int i=0；i&lt;n；i++ )   {//循环n次        int u=-1，MIN=Inf；//u使d[u]最小，MIN存放该最小的d[u]        for (int j=0；j&lt;n；j++ )        {//找到未访问的顶点中d[]最小的            if (vis[j]==false &amp;&amp; d[j]&lt;MIN )            {                u=j；                MIN=d[j]；            }        }        //找不到小于Inf的d[u]，则剩下的顶点和集合s不连通        if (u==-1 )            return-1；        vis[u]=true；//标记u为已访问        ans += d[u]；//将与集合s距离最小的边加入最小生成树        for (int v=0；v&lt;n；v++ )        {//v未访问&amp;&amp;u能到达v&amp;&amp;以u为中介点可以使v离集合S更近            if (vis[v]==false &amp;&amp; G[u][v] ！= Inf &amp;&amp; G[u][v]&lt; d[v] )                d[v]=G[u][v]；//将G[u][v]赋值给d[v]        }    }    return ans；//返回最小生成树的边权之和}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- password: --&gt;

&lt;p&gt;适用范围：要求无向图&lt;/p&gt;
&lt;p&gt;prim算法（读者可以将其读作“普里姆算法”）用来解决最小生成树问题，&lt;/p&gt;
&lt;p&gt;其基本思想是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对图G（VE）设置集合S，存放已被访问的顶点，&lt;/p&gt;
&lt;/li
      
    
    </summary>
    
    
      <category term="数据结构" scheme="http://www.zzw1024.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="prim, 最小生成树" scheme="http://www.zzw1024.top/tags/prim-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
</feed>
